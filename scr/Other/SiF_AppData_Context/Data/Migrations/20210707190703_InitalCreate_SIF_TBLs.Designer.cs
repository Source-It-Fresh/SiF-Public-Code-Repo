/*
### ### ### ### ### ### ###
SourceItFresh - Copyright (C) 2020
This SiF file is licensed under v3 of the GNU Affero General Public License.
### ### ###
GNU AGPLv3 lets people do almost anything they want with the project, except distributing closed-source versions.

Permissions of this strongest copyleft license are conditioned on:
Making available the complete source code of works and modifications, 
 which include larger works using a licensed work, under the same license.
Copyright and license notices must be preserved.
Contributors provide an express grant of patent rights.
When a modified version is used to provide a service over a network,
 the complete source code of the modified version must be made available.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY,
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
### ### ###
See LICENSE.txt for more details or visit <https://www.gnu.org/licenses/>
### ### ### ### ### ### ###
*/

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SourceItFresh.AppData.Data;

#nullable disable

namespace SIF_AppData_Context.Migrations
{
    [DbContext(typeof(SIF_Data_DbContext))]
    [Migration("20210707190703_InitalCreate_SIF_TBLs")]
    partial class InitalCreate_SIF_TBLs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.dbo.TrefleData", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                b.Property<string>("AnaerobicTolerance")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("anaerobic_tolerance");

                b.Property<short?>("AtmosphericHumidity")
                    .HasColumnType("smallint")
                    .HasColumnName("atmospheric_humidity");

                b.Property<string>("Author")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("author");

                b.Property<short?>("AverageHeightCm")
                    .HasColumnType("smallint")
                    .HasColumnName("average_height_cm");

                b.Property<string>("Bibliography")
                    .HasMaxLength(1000)
                    .HasColumnType("nvarchar(1000)")
                    .HasColumnName("bibliography");

                b.Property<string>("BloomMonths")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("bloom_months");

                b.Property<string>("CommonName")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("common_name");

                b.Property<string>("CommonNames")
                    .HasMaxLength(2147483647)
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("common_names");

                b.Property<string>("Distributions")
                    .HasMaxLength(2147483647)
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("distributions");

                b.Property<bool?>("Edible")
                    .HasColumnType("bit")
                    .HasColumnName("edible");

                b.Property<string>("EdiblePart")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("edible_part");

                b.Property<string>("Family")
                    .HasMaxLength(1500)
                    .HasColumnType("nvarchar(1500)")
                    .HasColumnName("family");

                b.Property<string>("FamilyCommonName")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("family_common_name");

                b.Property<string>("FlowerColor")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("flower_color");

                b.Property<bool?>("FlowerConspicuous")
                    .HasColumnType("bit")
                    .HasColumnName("flower_conspicuous");

                b.Property<string>("FoliageColor")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("foliage_color");

                b.Property<string>("FoliageTexture")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("foliage_texture");

                b.Property<string>("FruitColor")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("fruit_color");

                b.Property<bool?>("FruitConspicuous")
                    .HasColumnType("bit")
                    .HasColumnName("fruit_conspicuous");

                b.Property<string>("FruitMonths")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("fruit_months");

                b.Property<string>("Genus")
                    .HasMaxLength(1500)
                    .HasColumnType("nvarchar(1500)")
                    .HasColumnName("genus");

                b.Property<decimal?>("GroundHumidity")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("ground_humidity");

                b.Property<string>("GrowthForm")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("growth_form");

                b.Property<string>("GrowthHabit")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("growth_habit");

                b.Property<string>("GrowthMonths")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("growth_months");

                b.Property<string>("GrowthRate")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("growth_rate");

                b.Property<string>("ImageUrl")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("image_url");

                b.Property<short?>("Light")
                    .HasColumnType("smallint")
                    .HasColumnName("light");

                b.Property<short?>("MaximumHeightCm")
                    .HasColumnType("smallint")
                    .HasColumnName("maximum_height_cm");

                b.Property<short?>("MinimumRootDepthCm")
                    .HasColumnType("smallint")
                    .HasColumnName("minimum_root_depth_cm");

                b.Property<decimal?>("PhMaximum")
                    .HasColumnType("decimal(6,4)")
                    .HasColumnName("ph_maximum");

                b.Property<decimal?>("PhMinimum")
                    .HasColumnType("decimal(6,4)")
                    .HasColumnName("ph_minimum");

                b.Property<short?>("PlantingDaysToHarvest")
                    .HasColumnType("smallint")
                    .HasColumnName("planting_days_to_harvest");

                b.Property<string>("PlantingDescription")
                    .HasMaxLength(2000)
                    .HasColumnType("nvarchar(2000)")
                    .HasColumnName("planting_description");

                b.Property<short?>("PlantingRowSpacingCm")
                    .HasColumnType("smallint")
                    .HasColumnName("planting_row_spacing_cm");

                b.Property<string>("PlantingSowingDescription")
                    .HasMaxLength(1000)
                    .HasColumnType("nvarchar(1000)")
                    .HasColumnName("planting_sowing_description");

                b.Property<short?>("PlantingSpreadCm")
                    .HasColumnType("smallint")
                    .HasColumnName("planting_spread_cm");

                b.Property<string>("Rank")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("rank");

                b.Property<string>("ScientificName")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("scientific_name");

                b.Property<short?>("SoilNutriments")
                    .HasColumnType("smallint")
                    .HasColumnName("soil_nutriments");

                b.Property<short?>("SoilSalinity")
                    .HasColumnType("smallint")
                    .HasColumnName("soil_salinity");

                b.Property<string>("Synonyms")
                    .HasMaxLength(2147483647)
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("synonyms");

                b.Property<string>("UrlCatminat")
                    .HasMaxLength(2147483647)
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("url_catminat");

                b.Property<string>("UrlGbif")
                    .HasMaxLength(2147483647)
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("url_gbif");

                b.Property<string>("UrlOpenfarm")
                    .HasMaxLength(2147483647)
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("url_openfarm");

                b.Property<string>("UrlPlantnet")
                    .HasMaxLength(2147483647)
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("url_plantnet");

                b.Property<string>("UrlPowo")
                    .HasMaxLength(2147483647)
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("url_powo");

                b.Property<string>("UrlTelaBotanica")
                    .HasMaxLength(2147483647)
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("url_tela_botanica");

                b.Property<string>("UrlTropicos")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("url_tropicos");

                b.Property<string>("UrlUsda")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("url_usda");

                b.Property<string>("UrlWikipediaEn")
                    .HasMaxLength(2147483647)
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("url_wikipedia_en");

                b.Property<bool?>("Vegetable")
                    .HasColumnType("bit")
                    .HasColumnName("vegetable");

                b.Property<int?>("Year")
                    .HasColumnType("int")
                    .HasColumnName("year");

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_TrefleData_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_TrefleData_id"), 90);

                b.ToTable("TrefleData", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Division", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_Division_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_Division_id"), 90);

                b.ToTable("Division", "plt");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Division_DivisionClass", b =>
            {
                b.Property<int>("DivisionId")
                    .HasColumnType("int")
                    .HasColumnName("divisionId");

                b.Property<int>("DivisionClassId")
                    .HasColumnType("int")
                    .HasColumnName("divisionClassId");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("DivisionId", "DivisionClassId");

                b.HasIndex(new[] { "DivisionClassId" }, "IX_Division_DivisionClass_divisionClassId");

                b.HasIndex(new[] { "DivisionId", "DivisionClassId" }, "UQ_Division_DivisionClass_ID")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DivisionId", "DivisionClassId" }, "UQ_Division_DivisionClass_ID"), 90);

                b.ToTable("Division_DivisionClass", "plt");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.DivisionClass", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_DivisionClass_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_DivisionClass_id"), 90);

                b.ToTable("DivisionClass", "plt");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.DivisionClass_DivisionOrder", b =>
            {
                b.Property<int>("DivisionClassId")
                    .HasColumnType("int")
                    .HasColumnName("divisionClassId");

                b.Property<int>("DivisionOrderId")
                    .HasColumnType("int")
                    .HasColumnName("divisionOrderId");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("DivisionClassId", "DivisionOrderId");

                b.HasIndex(new[] { "DivisionOrderId" }, "IX_DivisionClass_DivisionOrder_divisionOrderId");

                b.HasIndex(new[] { "DivisionClassId", "DivisionOrderId" }, "UQ_DivisionClass_DivisionOrder_ID")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DivisionClassId", "DivisionOrderId" }, "UQ_DivisionClass_DivisionOrder_ID"), 90);

                b.ToTable("DivisionClass_DivisionOrder", "plt");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.DivisionOrder", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_DivisionOrder_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_DivisionOrder_id"), 90);

                b.ToTable("DivisionOrder", "plt");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.DivisionOrder_Family", b =>
            {
                b.Property<int>("DivisionOrderId")
                    .HasColumnType("int")
                    .HasColumnName("divisionOrderId");

                b.Property<int>("FamilyId")
                    .HasColumnType("int")
                    .HasColumnName("familyId");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("DivisionOrderId", "FamilyId");

                b.HasIndex(new[] { "FamilyId" }, "IX_DivisionOrder_Family_familyId");

                b.HasIndex(new[] { "DivisionOrderId", "FamilyId" }, "UQ_DivisionOrder_Family_ID")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DivisionOrderId", "FamilyId" }, "UQ_DivisionOrder_Family_ID"), 90);

                b.ToTable("DivisionOrder_Family", "plt");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Family", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("CommonName")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("commonName");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_Family_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_Family_id"), 90);

                b.ToTable("Family", "plt");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Family_Genus", b =>
            {
                b.Property<int>("FamilyId")
                    .HasColumnType("int")
                    .HasColumnName("familyId");

                b.Property<int>("GenusId")
                    .HasColumnType("int")
                    .HasColumnName("genusId");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("FamilyId", "GenusId");

                b.HasIndex(new[] { "GenusId" }, "IX_Family_Genus_genusId");

                b.HasIndex(new[] { "FamilyId", "GenusId" }, "UQ_Family_Genus_ID")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "FamilyId", "GenusId" }, "UQ_Family_Genus_ID"), 90);

                b.ToTable("Family_Genus", "plt");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Genus", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_Genus_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_Genus_id"), 90);

                b.ToTable("Genus", "plt");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Genus_Plant", b =>
            {
                b.Property<int>("GenusId")
                    .HasColumnType("int")
                    .HasColumnName("genusId");

                b.Property<long>("PlantId")
                    .HasColumnType("bigint")
                    .HasColumnName("plantId");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("GenusId", "PlantId");

                b.HasIndex("PlantId");

                b.HasIndex(new[] { "GenusId", "PlantId" }, "UQ_Genus_Plant_ID")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "GenusId", "PlantId" }, "UQ_Genus_Plant_ID"), 90);

                b.ToTable("Genus_Plant", "plt");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Kingdom", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_Kingdom_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_Kingdom_id"), 90);

                b.ToTable("Kingdom", "plt");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Kingdom_SubKingdom", b =>
            {
                b.Property<int>("KingdomId")
                    .HasColumnType("int")
                    .HasColumnName("kingdomId");

                b.Property<int>("SubKingdomId")
                    .HasColumnType("int")
                    .HasColumnName("subKingdomId");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("KingdomId", "SubKingdomId");

                b.HasIndex(new[] { "SubKingdomId" }, "IX_Kingdom_SubKingdom_subKingdomId");

                b.HasIndex(new[] { "KingdomId", "SubKingdomId" }, "UQ_Kingdom_SubKingdom_ID")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "KingdomId", "SubKingdomId" }, "UQ_Kingdom_SubKingdom_ID"), 90);

                b.ToTable("Kingdom_SubKingdom", "plt");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Plant", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                b.Property<string>("CommonEnglishName")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("commonEnglishName");

                b.Property<string>("Cultivars")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("cultivars");

                b.Property<int?>("DivisionClassId")
                    .HasColumnType("int")
                    .HasColumnName("divisionClassId");

                b.Property<int?>("DivisionId")
                    .HasColumnType("int")
                    .HasColumnName("divisionId");

                b.Property<int?>("DivisionOrderId")
                    .HasColumnType("int")
                    .HasColumnName("divisionOrderId");

                b.Property<string>("FamilyCommonName")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("familyCommonName");

                b.Property<int?>("FamilyId")
                    .HasColumnType("int")
                    .HasColumnName("familyId");

                b.Property<string>("Forms")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("forms");

                b.Property<int?>("GenusId")
                    .HasColumnType("int")
                    .HasColumnName("genusId");

                b.Property<string>("Hybrids")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("hybrids");

                b.Property<string>("ImagesUrl")
                    .HasMaxLength(200)
                    .HasColumnType("nvarchar(200)")
                    .HasColumnName("imagesUrl");

                b.Property<int?>("MainSpeciesId")
                    .HasColumnType("int")
                    .HasColumnName("mainSpeciesId");

                b.Property<string>("NativeStatus")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("nativeStatus");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.Property<string>("ScientificName")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("scientificName");

                b.Property<string>("SubSpecies")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("subSpecies");

                b.Property<string>("Varieties")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("varieties");

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_Plant_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_Plant_id"), 90);

                b.ToTable("Plant", "plt");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Plant_Species", b =>
            {
                b.Property<long>("PlantId")
                    .HasColumnType("bigint")
                    .HasColumnName("plantId");

                b.Property<long>("SpeciesId")
                    .IsConcurrencyToken()
                    .HasColumnType("bigint")
                    .HasColumnName("speciesId");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("PlantId", "SpeciesId");

                b.HasIndex(new[] { "SpeciesId" }, "IX_Plant_Species_speciesId");

                b.HasIndex(new[] { "PlantId", "SpeciesId" }, "UQ_Plant_Species_ID")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PlantId", "SpeciesId" }, "UQ_Plant_Species_ID"), 90);

                b.ToTable("Plant_Species", "plt");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Species", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                b.Property<string>("CommonName")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("commonName");

                b.Property<bool?>("CompleteData")
                    .HasColumnType("bit")
                    .HasColumnName("completeData");

                b.Property<string>("FamilyCommonName")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("familyCommonName");

                b.Property<string>("Flower_Color")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("flower_Color");

                b.Property<string>("Flower_Conspicuous")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("flower_Conspicuous");

                b.Property<string>("Foliage_Color")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("foliage_Color");

                b.Property<string>("Foliage_PorositySummer")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("foliage_PorositySummer");

                b.Property<string>("Foliage_PorosityWinter")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("foliage_PorosityWinter");

                b.Property<string>("Foliage_Texture")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("foliage_Texture");

                b.Property<string>("FruitOrSeed_Abundance")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("fruitOrSeed_Abundance");

                b.Property<string>("FruitOrSeed_Color")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("fruitOrSeed_Color");

                b.Property<string>("FruitOrSeed_Conspicuous")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("fruitOrSeed_Conspicuous");

                b.Property<string>("FruitOrSeed_PeriodBegin")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("fruitOrSeed_PeriodBegin");

                b.Property<string>("FruitOrSeed_PeriodEnd")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("fruitOrSeed_PeriodEnd");

                b.Property<string>("FruitOrSeed_Persistence")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("fruitOrSeed_Persistence");

                b.Property<string>("Growth_AnaerobicTolerance")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("growth_AnaerobicTolerance");

                b.Property<string>("Growth_CaCO3Tolerance")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("growth_CaCO3Tolerance");

                b.Property<string>("Growth_ColdStratificationRequired")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("growth_ColdStratificationRequired");

                b.Property<string>("Growth_DroughtTolerance")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("growth_DroughtTolerance");

                b.Property<string>("Growth_FertilityRequirement")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("growth_FertilityRequirement");

                b.Property<string>("Growth_FireTolerance")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("growth_FireTolerance");

                b.Property<string>("Growth_FrostFreeDaysMinimum")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("growth_FrostFreeDaysMinimum");

                b.Property<string>("Growth_HedgeTolerance")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("growth_HedgeTolerance");

                b.Property<string>("Growth_MoistureUse")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("growth_MoistureUse");

                b.Property<decimal?>("Growth_PhMaximum")
                    .HasColumnType("decimal(6,4)")
                    .HasColumnName("growth_PhMaximum");

                b.Property<decimal?>("Growth_PhMinimum")
                    .HasColumnType("decimal(6,4)")
                    .HasColumnName("growth_PhMinimum");

                b.Property<string>("Growth_PlantingDensityMaximum_sqm")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("growth_PlantingDensityMaximum_sqm");

                b.Property<string>("Growth_PlantingDensityMinimum_sqm")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("growth_PlantingDensityMinimum_sqm");

                b.Property<string>("Growth_PrecipitationMaximum_cm")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("growth_PrecipitationMaximum_cm");

                b.Property<string>("Growth_PrecipitationMinimum_cm")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("growth_PrecipitationMinimum_cm");

                b.Property<string>("Growth_ResproutAbility")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("growth_ResproutAbility");

                b.Property<string>("Growth_RootDepthMinimum_cm")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("growth_RootDepthMinimum_cm");

                b.Property<string>("Growth_SalinityTolerance")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("growth_SalinityTolerance");

                b.Property<string>("Growth_ShadeTolerance")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("growth_ShadeTolerance");

                b.Property<string>("Growth_TemperatureMinimum_deg_c")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("growth_TemperatureMinimum_deg_c");

                b.Property<string>("ImagesUrl")
                    .HasMaxLength(200)
                    .HasColumnType("nvarchar(200)")
                    .HasColumnName("imagesUrl");

                b.Property<bool?>("IsMainSpecies")
                    .HasColumnType("bit")
                    .HasColumnName("isMainSpecies");

                b.Property<long?>("MainSpeciesId")
                    .HasColumnType("bigint")
                    .HasColumnName("mainSpeciesId");

                b.Property<string>("NativeStatus")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("nativeStatus");

                b.Property<string>("Products_BerryNutSeed")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("products_BerryNutSeed");

                b.Property<string>("Products_ChristmasTree")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("products_ChristmasTree");

                b.Property<string>("Products_Fodder")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("products_Fodder");

                b.Property<string>("Products_Fuelwood")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("products_Fuelwood");

                b.Property<string>("Products_Lumber")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("products_Lumber");

                b.Property<string>("Products_NavalStore")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("products_NavalStore");

                b.Property<string>("Products_NurseryStock")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("products_NurseryStock");

                b.Property<string>("Products_PalatableBrowseAnimal")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("products_PalatableBrowseAnimal");

                b.Property<string>("Products_PalatableGrazeAnimal")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("products_PalatableGrazeAnimal");

                b.Property<string>("Products_PalatableHuman")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("products_PalatableHuman");

                b.Property<string>("Products_Post")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("products_Post");

                b.Property<string>("Products_ProteinPotential")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("products_ProteinPotential");

                b.Property<string>("Products_Pulpwood")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("products_Pulpwood");

                b.Property<string>("Products_Veneer")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("products_Veneer");

                b.Property<string>("Propagation_BareRoot")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("propagation_BareRoot");

                b.Property<string>("Propagation_Bulbs")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("propagation_Bulbs");

                b.Property<string>("Propagation_Container")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("propagation_Container");

                b.Property<string>("Propagation_Corms")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("propagation_Corms");

                b.Property<string>("Propagation_Cuttings")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("propagation_Cuttings");

                b.Property<string>("Propagation_Seed")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("propagation_Seed");

                b.Property<string>("Propagation_Sod")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("propagation_Sod");

                b.Property<string>("Propagation_Sprigs")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("propagation_Sprigs");

                b.Property<string>("Propagation_Tubers")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("propagation_Tubers");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.Property<string>("ScientificName")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("scientificName");

                b.Property<string>("Seed_BloomPeriod")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("seed_BloomPeriod");

                b.Property<string>("Seed_CommercialAvailability")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("seed_CommercialAvailability");

                b.Property<string>("Seed_SeedlingVigor")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("seed_SeedlingVigor");

                b.Property<string>("Seed_SeedsPerPound")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("seed_SeedsPerPound");

                b.Property<string>("Seed_SmallGrain")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("seed_SmallGrain");

                b.Property<string>("Seed_SpreadRate")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("seed_SpreadRate");

                b.Property<string>("Seed_VegetativeSpreadRate")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("seed_VegetativeSpreadRate");

                b.Property<string>("SoilsAdaptation_Coarse")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("soilsAdaptation_Coarse");

                b.Property<string>("SoilsAdaptation_Fine")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("soilsAdaptation_Fine");

                b.Property<string>("SoilsAdaptation_Medium")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("soilsAdaptation_Medium");

                b.Property<string>("Specification_Bloat")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("specification_Bloat");

                b.Property<string>("Specification_C_n_ratio")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("specification_C_n_ratio");

                b.Property<string>("Specification_CoppicePotential")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("specification_CoppicePotential");

                b.Property<string>("Specification_FallConspicuous")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("specification_FallConspicuous");

                b.Property<string>("Specification_FireResistance")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("specification_FireResistance");

                b.Property<string>("Specification_GrowthForm")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("specification_GrowthForm");

                b.Property<string>("Specification_GrowthHabit")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("specification_GrowthHabit");

                b.Property<string>("Specification_GrowthPeriod")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("specification_GrowthPeriod");

                b.Property<string>("Specification_GrowthRate")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("specification_GrowthRate");

                b.Property<string>("Specification_KnownAllelopath")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("specification_KnownAllelopath");

                b.Property<string>("Specification_LeafRetention")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("specification_LeafRetention");

                b.Property<string>("Specification_Lifespan")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("specification_Lifespan");

                b.Property<string>("Specification_LowGrowingGrass")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("specification_LowGrowingGrass");

                b.Property<string>("Specification_MatureHeight_cm")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("specification_MatureHeight_cm");

                b.Property<string>("Specification_MaxHeightAtBaseAge_cm")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("specification_MaxHeightAtBaseAge_cm");

                b.Property<string>("Specification_NitrogenFixation")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("specification_NitrogenFixation");

                b.Property<string>("Specification_RegrowthRate")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("specification_RegrowthRate");

                b.Property<string>("Specification_ShapeAndOrientation")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("specification_ShapeAndOrientation");

                b.Property<string>("Specification_Toxicity")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("specification_Toxicity");

                b.Property<string>("Status")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("status");

                b.Property<string>("Synonym")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("synonym");

                b.Property<string>("Type")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("type");

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_Species_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_Species_id"), 90);

                b.ToTable("Species", "plt");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.SubKingdom", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_SubKingdom_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_SubKingdom_id"), 90);

                b.ToTable("SubKingdom", "plt");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.SubKingdom_Division", b =>
            {
                b.Property<int>("SubKingdomId")
                    .HasColumnType("int")
                    .HasColumnName("subKingdomId");

                b.Property<int>("DivisionId")
                    .IsConcurrencyToken()
                    .HasColumnType("int")
                    .HasColumnName("divisionId");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("SubKingdomId", "DivisionId");

                b.HasIndex(new[] { "DivisionId" }, "IX_SubKingdom_Division_divisionId");

                b.HasIndex(new[] { "SubKingdomId", "DivisionId" }, "UQ_SubKingdom_Division_ID")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SubKingdomId", "DivisionId" }, "UQ_SubKingdom_Division_ID"), 90);

                b.ToTable("SubKingdom_Division", "plt");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Configure_PaidServices.Models.dbo.PaidService", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id")
                    .HasColumnOrder(0);

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Details")
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)")
                    .HasColumnName("details")
                    .HasColumnOrder(12);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("OwnerId")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("ownerId")
                    .HasColumnOrder(995);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_PaidService_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_PaidService_id"), 90);

                b.ToTable("PaidService", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Configure_Settings.Models.acc.TraderEntitySettingsDatum", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasColumnOrder(0)
                    .HasDefaultValueSql("(newid())");

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasColumnOrder(991);

                b.Property<DateTime>("DateModified")
                    .HasColumnType("datetime")
                    .HasColumnName("dateModified")
                    .HasColumnOrder(993);

                b.Property<bool>("Display_DynamicNav")
                    .HasColumnType("bit")
                    .HasColumnName("display_DynamicNav")
                    .HasColumnOrder(28);

                b.Property<bool>("Display_InputControlLabels")
                    .HasColumnType("bit")
                    .HasColumnName("display_InputControlLabels")
                    .HasColumnOrder(27);

                b.Property<bool>("Display_Titles")
                    .HasColumnType("bit")
                    .HasColumnName("display_Titles")
                    .HasColumnOrder(26);

                b.Property<bool>("InfoBar_Alerts")
                    .HasColumnType("bit")
                    .HasColumnName("infoBar_Alerts")
                    .HasColumnOrder(32);

                b.Property<bool>("InfoBar_LocalTime")
                    .HasColumnType("bit")
                    .HasColumnName("infoBar_LocalTime")
                    .HasColumnOrder(31);

                b.Property<bool>("InfoBar_ServerTime")
                    .HasColumnType("bit")
                    .HasColumnName("infoBar_ServerTime")
                    .HasColumnOrder(30);

                b.Property<bool>("InfoBar_Show")
                    .HasColumnType("bit")
                    .HasColumnName("infoBar_Show")
                    .HasColumnOrder(29);

                b.Property<bool>("InfoBar_Weather")
                    .HasColumnType("bit")
                    .HasColumnName("infoBar_Weather")
                    .HasColumnOrder(33);

                b.Property<bool>("LayoutType_Simple")
                    .HasColumnType("bit")
                    .HasColumnName("layoutType_Simple")
                    .HasColumnOrder(24);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.Property<string>("Theme_Name")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("theme_Name")
                    .HasColumnOrder(25);

                b.Property<bool>("TitleBar_Heading")
                    .HasColumnType("bit")
                    .HasColumnName("titleBar_Heading")
                    .HasColumnOrder(35);

                b.Property<bool>("TitleBar_Show")
                    .HasColumnType("bit")
                    .HasColumnName("titleBar_Show")
                    .HasColumnOrder(34);

                b.Property<bool>("TitleBar_TopNavSubMenus")
                    .HasColumnType("bit")
                    .HasColumnName("titleBar_TopNavSubMenus")
                    .HasColumnOrder(36);

                b.Property<string>("TraderEntity_PrimaryHexColor")
                    .HasMaxLength(7)
                    .HasColumnType("nvarchar(7)")
                    .HasColumnName("traderEntity_PrimaryHexColor")
                    .HasColumnOrder(22);

                b.Property<string>("TraderEntity_SecondaryHexColor")
                    .HasMaxLength(7)
                    .HasColumnType("nvarchar(7)")
                    .HasColumnName("traderEntity_SecondaryHexColor")
                    .HasColumnOrder(23);

                b.Property<string>("UserCreated")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userCreated")
                    .HasColumnOrder(992);

                b.Property<string>("UserModified")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userModified")
                    .HasColumnOrder(994);

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_TraderEntitySettingsDatum_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_TraderEntitySettingsDatum_id"), 90);

                b.ToTable("TraderEntitySettingsDatum", "acc");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Core_Help.Models.dbo.FeedbackCategory", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id")
                    .HasColumnOrder(0);

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Details")
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)")
                    .HasColumnName("details")
                    .HasColumnOrder(12);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("OwnerId")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("ownerId")
                    .HasColumnOrder(995);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.HasKey("Id");

                b.HasIndex(new[] { "Name" }, "UQ_FeedbackCategory_Name")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Name" }, "UQ_FeedbackCategory_Name"), 90);

                b.ToTable("FeedbackCategory", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Core_Help.Models.dbo.FeedbackType", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id")
                    .HasColumnOrder(0);

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Details")
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)")
                    .HasColumnName("details")
                    .HasColumnOrder(12);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("OwnerId")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("ownerId")
                    .HasColumnOrder(995);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.HasKey("Id");

                b.HasIndex(new[] { "Name" }, "UQ_FeedbackType_Name")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Name" }, "UQ_FeedbackType_Name"), 90);

                b.ToTable("FeedbackType", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Core_Help.Models.log.Feedback", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                b.Property<string>("ApplicationVersion")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("applicationVersion");

                b.Property<string>("BaseUserId")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("baseUserId");

                b.Property<DateTime>("DateCreated")
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated");

                b.Property<string>("Details")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("details");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnType("nvarchar(200)")
                    .HasColumnName("email");

                b.Property<int>("FeedbackCategoryId")
                    .HasColumnType("int")
                    .HasColumnName("feedbackCategoryId");

                b.Property<Guid>("FeedbackMetadataId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("feedbackMetadataId");

                b.Property<int>("FeedbackTypeId")
                    .HasColumnType("int")
                    .HasColumnName("feedbackTypeId");

                b.Property<string>("IdentityName")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("identityName");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("Id");

                b.HasIndex(new[] { "FeedbackCategoryId" }, "IX_Feedback_feedbackCategoryId");

                b.HasIndex(new[] { "FeedbackMetadataId" }, "IX_Feedback_feedbackMetadataId");

                b.HasIndex(new[] { "FeedbackTypeId" }, "IX_Feedback_feedbackTypeId");

                b.HasIndex(new[] { "Id" }, "UQ_Feedback_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_Feedback_id"), 90);

                b.ToTable("Feedback", "log");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Core_Help.Models.log.FeedbackMetadata", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                b.Property<string>("Browser")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("browser");

                b.Property<string>("BrowserPlugins")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("browserPlugins");

                b.Property<string>("ConnectedSocialMediaAcounts")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("connectedSocialMediaAcounts");

                b.Property<string>("ConnectionSpeed")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("connectionSpeed");

                b.Property<string>("Cpu")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("cpu");

                b.Property<DateTime>("DateCreated")
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated");

                b.Property<string>("Location")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("location");

                b.Property<string>("OperatingSystem")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("operatingSystem");

                b.Property<string>("PublicIP")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("publicIP");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_FeedbackMetadata_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_FeedbackMetadata_id"), 90);

                b.ToTable("FeedbackMetadata", "log");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Core_Help.Models.log.Response", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                b.Property<DateTime>("DateCreated")
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated");

                b.Property<Guid>("FeedbackId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("feedbackId");

                b.Property<Guid>("ResponderUserId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("responderUserId");

                b.Property<string>("ResponseText")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("responseText");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("Id");

                b.HasIndex(new[] { "FeedbackId" }, "IX_Response_feedbackId");

                b.HasIndex(new[] { "Id" }, "UQ_Response_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_Response_id"), 90);

                b.ToTable("Response", "log");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Core_Login.Models.acc.User_SecurityGroup", b =>
            {
                b.Property<string>("UserBaseId")
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userBaseId")
                    .HasColumnOrder(1);

                b.Property<Guid>("SecurityGroupId")
                    .IsConcurrencyToken()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("securityGroupId")
                    .HasColumnOrder(2);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("UserBaseId", "SecurityGroupId");

                b.HasIndex(new[] { "SecurityGroupId" }, "IX_User_SecurityGroup_securityGroupId");

                b.HasIndex(new[] { "UserBaseId", "SecurityGroupId" }, "UQ_User_SecurityGroup_Id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "UserBaseId", "SecurityGroupId" }, "UQ_User_SecurityGroup_Id"), 90);

                b.ToTable("User_SecurityGroup", "acc");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Core_Login.Models.acc.User_TraderEntity", b =>
            {
                b.Property<string>("UserBaseId")
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userBaseId")
                    .HasColumnOrder(1);

                b.Property<Guid>("TraderEntityId")
                    .IsConcurrencyToken()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("traderEntityId")
                    .HasColumnOrder(2);

                b.Property<bool>("CurrentContext")
                    .HasColumnType("bit")
                    .HasColumnName("currentContext");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.Property<Guid>("TraderEntitySettingsDatumId")
                    .IsConcurrencyToken()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("traderEntitySettingsDatumId")
                    .HasColumnOrder(3);

                b.HasKey("UserBaseId", "TraderEntityId");

                b.HasIndex(new[] { "TraderEntityId" }, "IX_User_TraderEntity_traderEntityId");

                b.HasIndex(new[] { "TraderEntitySettingsDatumId" }, "IX_User_TraderEntity_traderEntitySettingsDatumId");

                b.HasIndex(new[] { "UserBaseId", "TraderEntityId" }, "UQ_User_TraderEntity_Id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "UserBaseId", "TraderEntityId" }, "UQ_User_TraderEntity_Id"), 90);

                b.ToTable("User_TraderEntity", "acc");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Core_Login.Models.dbo.SystemParameter", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id")
                    .HasColumnOrder(0);

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Details")
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)")
                    .HasColumnName("details")
                    .HasColumnOrder(12);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("OwnerId")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("ownerId")
                    .HasColumnOrder(995);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.Property<string>("Value")
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("value")
                    .HasColumnOrder(13);

                b.HasKey("Id");

                b.HasIndex(new[] { "Name" }, "UQ_SystemParameter_Name")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Name" }, "UQ_SystemParameter_Name"), 90);

                b.ToTable("SystemParameter", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Commodities.Models.cmd.AvailabilitySchedule", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasColumnOrder(0)
                    .HasDefaultValueSql("(newid())");

                b.Property<Guid>("CommodityId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("commodityId")
                    .HasColumnOrder(5);

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasColumnOrder(991);

                b.Property<DateTime>("DateModified")
                    .HasColumnType("datetime")
                    .HasColumnName("dateModified")
                    .HasColumnOrder(993);

                b.Property<string>("DayOfTheMonth")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("dayOfTheMonth")
                    .HasColumnOrder(24);

                b.Property<string>("DayOfTheWeek")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("dayOfTheWeek")
                    .HasColumnOrder(23);

                b.Property<string>("DayOfTheYear")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("dayOfTheYear")
                    .HasColumnOrder(25);

                b.Property<Guid>("DeliveryConfigId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("deliveryConfigId")
                    .HasColumnOrder(6);

                b.Property<string>("DriverUserId")
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("driverUserId")
                    .HasColumnOrder(26);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<bool?>("Recurring")
                    .HasColumnType("bit")
                    .HasColumnName("recurring")
                    .HasColumnOrder(22);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.Property<DateTime?>("SpecificDate")
                    .HasColumnType("datetime")
                    .HasColumnName("specificDate")
                    .HasColumnOrder(21);

                b.Property<string>("UserCreated")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userCreated")
                    .HasColumnOrder(992);

                b.Property<string>("UserModified")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userModified")
                    .HasColumnOrder(994);

                b.HasKey("Id");

                b.HasIndex("DeliveryConfigId");

                b.HasIndex(new[] { "CommodityId" }, "IX_AvailabilitySchedule_commodityId");

                b.HasIndex(new[] { "DriverUserId" }, "IX_AvailabilitySchedule_driverUserId");

                b.HasIndex(new[] { "Id" }, "UQ_AvailabilitySchedule_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_AvailabilitySchedule_id"), 90);

                b.ToTable("AvailabilitySchedule", "cmd");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Commodities.Models.cmd.Commodity", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasColumnOrder(0)
                    .HasDefaultValueSql("(newid())");

                b.Property<int>("CurrencyId")
                    .HasColumnType("int")
                    .HasColumnName("currencyId")
                    .HasColumnOrder(21);

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasColumnOrder(991);

                b.Property<DateTime>("DateModified")
                    .HasColumnType("datetime")
                    .HasColumnName("dateModified")
                    .HasColumnOrder(993);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.Property<Guid>("TraderEntityId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("traderEntityId")
                    .HasColumnOrder(5);

                b.Property<string>("UserCreated")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userCreated")
                    .HasColumnOrder(992);

                b.Property<string>("UserModified")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userModified")
                    .HasColumnOrder(994);

                b.HasKey("Id");

                b.HasIndex(new[] { "TraderEntityId" }, "IX_Commodity_traderEntityId");

                b.HasIndex(new[] { "Id" }, "UQ_Commodity_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_Commodity_id"), 90);

                b.ToTable("Commodity", "cmd");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Commodities.Models.cmd.Consumable", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasColumnOrder(0)
                    .HasDefaultValueSql("(newid())");

                b.Property<byte[]>("ActualPhoto")
                    .HasColumnType("varbinary(max)")
                    .HasColumnName("actualPhoto")
                    .HasColumnOrder(21);

                b.Property<string>("Botany")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("botany")
                    .HasColumnOrder(44);

                b.Property<string>("Comments")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("comments")
                    .HasColumnOrder(32);

                b.Property<Guid>("CommodityId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("commodityId")
                    .HasColumnOrder(5);

                b.Property<string>("Cultivation")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("cultivation")
                    .HasColumnOrder(40);

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasColumnOrder(991);

                b.Property<DateTime>("DateModified")
                    .HasColumnType("datetime")
                    .HasColumnName("dateModified")
                    .HasColumnOrder(993);

                b.Property<DateTime?>("DateProduced")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateProduced")
                    .HasColumnOrder(23)
                    .HasDefaultValueSql("('1900-01-01 00:00:00.000')");

                b.Property<string>("Ecology")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("ecology")
                    .HasColumnOrder(43);

                b.Property<Guid?>("HarvestId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("harvestId")
                    .HasColumnOrder(6);

                b.Property<decimal?>("Height")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("height")
                    .HasColumnOrder(27);

                b.Property<string>("History")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("history")
                    .HasColumnOrder(45);

                b.Property<int?>("ItemCountTotal")
                    .HasColumnType("int")
                    .HasColumnName("itemCountTotal")
                    .HasColumnOrder(24);

                b.Property<decimal?>("Length")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("length")
                    .HasColumnOrder(25);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("NaturalRange")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("naturalRange")
                    .HasColumnOrder(35);

                b.Property<string>("Nutrition")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("nutrition")
                    .HasColumnOrder(37);

                b.Property<string>("PestsAndDiseases")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("pestsAndDiseases")
                    .HasColumnOrder(41);

                b.Property<long?>("PlantId")
                    .HasColumnType("bigint")
                    .HasColumnName("plantId")
                    .HasColumnOrder(22);

                b.Property<string>("Production")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("production")
                    .HasColumnOrder(38);

                b.Property<string>("QuantityGrade")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("quantityGrade")
                    .HasColumnOrder(30);

                b.Property<string>("Reproduction")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("reproduction")
                    .HasColumnOrder(39);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.Property<string>("StorageAndTransport")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("storageAndTransport")
                    .HasColumnOrder(42);

                b.Property<string>("StorageDetails")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("storageDetails")
                    .HasColumnOrder(31);

                b.Property<string>("Synonyms")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("synonyms")
                    .HasColumnOrder(33);

                b.Property<string>("UserCreated")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userCreated")
                    .HasColumnOrder(992);

                b.Property<string>("UserModified")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userModified")
                    .HasColumnOrder(994);

                b.Property<string>("Uses")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("uses")
                    .HasColumnOrder(36);

                b.Property<string>("Varieties")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("varieties")
                    .HasColumnOrder(34);

                b.Property<decimal?>("Volume")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("volume")
                    .HasColumnOrder(29);

                b.Property<decimal?>("Weight")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("weight")
                    .HasColumnOrder(28);

                b.Property<decimal?>("Width")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("width")
                    .HasColumnOrder(26);

                b.HasKey("Id");

                b.HasIndex(new[] { "CommodityId" }, "IX_Consumable_commodityId");

                b.HasIndex(new[] { "HarvestId" }, "IX_Consumable_harvestId");

                b.HasIndex(new[] { "PlantId" }, "IX_Consumable_plantId");

                b.HasIndex(new[] { "Id" }, "UQ_Consumable_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_Consumable_id"), 90);

                b.ToTable("Consumable", "cmd");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Commodities.Models.cmd.DeliveryConfig", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasColumnOrder(0)
                    .HasDefaultValueSql("(newid())");

                b.Property<Guid>("CommodityId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("commodityId")
                    .HasColumnOrder(5);

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasColumnOrder(991);

                b.Property<DateTime>("DateModified")
                    .HasColumnType("datetime")
                    .HasColumnName("dateModified")
                    .HasColumnOrder(993);

                b.Property<int>("DeliveryMethodId")
                    .HasColumnType("int")
                    .HasColumnName("deliveryMethodId")
                    .HasColumnOrder(21);

                b.Property<string>("DeliveryRangePlotPoints")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("deliveryRangePlotPoints")
                    .HasColumnOrder(23);

                b.Property<decimal>("DeliveryRange_km")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("deliveryRange_km")
                    .HasColumnOrder(22);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<decimal>("PricePer_km")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("pricePer_km")
                    .HasColumnOrder(24);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.Property<string>("UserCreated")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userCreated")
                    .HasColumnOrder(992);

                b.Property<string>("UserModified")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userModified")
                    .HasColumnOrder(994);

                b.HasKey("Id");

                b.HasIndex(new[] { "CommodityId" }, "IX_DeliveryConfig_commodityId");

                b.HasIndex(new[] { "DeliveryMethodId" }, "IX_DeliveryConfig_deliveryMethodId");

                b.HasIndex(new[] { "Id" }, "UQ_DeliveryConfig_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_DeliveryConfig_id"), 90);

                b.ToTable("DeliveryConfig", "cmd");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Commodities.Models.cmd.Packaging", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasColumnOrder(0)
                    .HasDefaultValueSql("(newid())");

                b.Property<bool>("Biodegradable")
                    .HasColumnType("bit")
                    .HasColumnName("biodegradable")
                    .HasColumnOrder(24);

                b.Property<bool>("Cardboard")
                    .HasColumnType("bit")
                    .HasColumnName("cardboard")
                    .HasColumnOrder(25);

                b.Property<Guid>("CommodityId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("commodityId")
                    .HasColumnOrder(5);

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasColumnOrder(991);

                b.Property<DateTime>("DateModified")
                    .HasColumnType("datetime")
                    .HasColumnName("dateModified")
                    .HasColumnOrder(993);

                b.Property<byte[]>("DesignImage")
                    .HasColumnType("varbinary(max)")
                    .HasColumnName("designImage")
                    .HasColumnOrder(21);

                b.Property<decimal?>("Height")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("height")
                    .HasColumnOrder(30);

                b.Property<decimal?>("Length")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("length")
                    .HasColumnOrder(28);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<bool>("None")
                    .HasColumnType("bit")
                    .HasColumnName("none")
                    .HasColumnOrder(23);

                b.Property<bool>("NotSpecified")
                    .HasColumnType("bit")
                    .HasColumnName("notSpecified")
                    .HasColumnOrder(22);

                b.Property<bool>("RecyclablePlastic")
                    .HasColumnType("bit")
                    .HasColumnName("recyclablePlastic")
                    .HasColumnOrder(26);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.Property<bool>("ToxicPlastic")
                    .HasColumnType("bit")
                    .HasColumnName("toxicPlastic")
                    .HasColumnOrder(27);

                b.Property<string>("UserCreated")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userCreated")
                    .HasColumnOrder(992);

                b.Property<string>("UserModified")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userModified")
                    .HasColumnOrder(994);

                b.Property<decimal?>("Volume")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("volume")
                    .HasColumnOrder(32);

                b.Property<decimal?>("Weight")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("weight")
                    .HasColumnOrder(31);

                b.Property<decimal?>("Width")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("width")
                    .HasColumnOrder(29);

                b.HasKey("Id");

                b.HasIndex(new[] { "CommodityId" }, "IX_Packaging_commodityId");

                b.HasIndex(new[] { "Id" }, "UQ_Packaging_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_Packaging_id"), 90);

                b.ToTable("Packaging", "cmd");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Commodities.Models.cmd.PaymentMethod", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasColumnOrder(0)
                    .HasDefaultValueSql("(newid())");

                b.Property<string>("BankDetails")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("bankDetails")
                    .HasColumnOrder(22);

                b.Property<Guid>("CommodityId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("commodityId")
                    .HasColumnOrder(5);

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasColumnOrder(991);

                b.Property<DateTime>("DateModified")
                    .HasColumnType("datetime")
                    .HasColumnName("dateModified")
                    .HasColumnOrder(993);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<int>("PaymentTypeId")
                    .HasColumnType("int")
                    .HasColumnName("paymentTypeId")
                    .HasColumnOrder(21);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.Property<string>("UserCreated")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userCreated")
                    .HasColumnOrder(992);

                b.Property<string>("UserModified")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userModified")
                    .HasColumnOrder(994);

                b.HasKey("Id");

                b.HasIndex(new[] { "CommodityId" }, "IX_PaymentMethod_commodityId");

                b.HasIndex(new[] { "PaymentTypeId" }, "IX_PaymentMethod_paymentTypeId");

                b.HasIndex(new[] { "Id" }, "UQ_PaymentMethod_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_PaymentMethod_id"), 90);

                b.ToTable("PaymentMethod", "cmd");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Commodities.Models.cmd.Permit", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasColumnOrder(0)
                    .HasDefaultValueSql("(newid())");

                b.Property<byte[]>("CertificateImage")
                    .HasColumnType("varbinary(max)")
                    .HasColumnName("certificateImage")
                    .HasColumnOrder(21);

                b.Property<Guid>("CommodityId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("commodityId")
                    .HasColumnOrder(5);

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasColumnOrder(991);

                b.Property<DateTime>("DateModified")
                    .HasColumnType("datetime")
                    .HasColumnName("dateModified")
                    .HasColumnOrder(993);

                b.Property<string>("Description")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("description")
                    .HasColumnOrder(22);

                b.Property<DateTime?>("ExpirationDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("expirationDate")
                    .HasColumnOrder(26)
                    .HasDefaultValueSql("('1900-01-01 00:00:00.000')");

                b.Property<DateTime?>("IssuedDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("issuedDate")
                    .HasColumnOrder(24)
                    .HasDefaultValueSql("('1900-01-01 00:00:00.000')");

                b.Property<string>("IssuerOrgName")
                    .HasMaxLength(150)
                    .HasColumnType("nvarchar(150)")
                    .HasColumnName("issuerOrgName")
                    .HasColumnOrder(23);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("OtherDetails")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("otherDetails")
                    .HasColumnOrder(27);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.Property<string>("UserCreated")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userCreated")
                    .HasColumnOrder(992);

                b.Property<string>("UserModified")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userModified")
                    .HasColumnOrder(994);

                b.Property<int?>("ValidFor_day")
                    .HasColumnType("int")
                    .HasColumnName("validFor_day")
                    .HasColumnOrder(25);

                b.HasKey("Id");

                b.HasIndex(new[] { "CommodityId" }, "IX_Permit_commodityId");

                b.HasIndex(new[] { "Id" }, "UQ_Permit_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_Permit_id"), 90);

                b.ToTable("Permit", "cmd");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Commodities.Models.cmd.Product", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasColumnOrder(0)
                    .HasDefaultValueSql("(newid())");

                b.Property<bool?>("AllowDiscount")
                    .HasColumnType("bit")
                    .HasColumnName("allowDiscount")
                    .HasColumnOrder(31);

                b.Property<Guid>("CommodityId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("commodityId")
                    .HasColumnOrder(5);

                b.Property<Guid?>("ConsumableId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("consumableId")
                    .HasColumnOrder(24);

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasColumnOrder(991);

                b.Property<DateTime>("DateModified")
                    .HasColumnType("datetime")
                    .HasColumnName("dateModified")
                    .HasColumnOrder(993);

                b.Property<DateTime>("DatePackaged")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("datePackaged")
                    .HasColumnOrder(25)
                    .HasDefaultValueSql("('1900-01-01 00:00:00.000')");

                b.Property<decimal?>("Discount_pct")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("discount_pct")
                    .HasColumnOrder(33);

                b.Property<decimal?>("FixedPrice_moneyUnits")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("fixedPrice_moneyUnits")
                    .HasColumnOrder(34);

                b.Property<string>("FullDescription")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("fullDescription")
                    .HasColumnOrder(23);

                b.Property<bool?>("IsOnSale")
                    .HasColumnType("bit")
                    .HasColumnName("isOnSale")
                    .HasColumnOrder(32);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<decimal?>("NewPriceTotal")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("newPriceTotal")
                    .HasColumnOrder(35);

                b.Property<Guid?>("PackageId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("packageId")
                    .HasColumnOrder(27);

                b.Property<byte[]>("Photo")
                    .HasColumnType("varbinary(max)")
                    .HasColumnName("photo")
                    .HasColumnOrder(21);

                b.Property<decimal>("PriceExclVatTax_moneyUnits")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("priceExclVatTax_moneyUnits")
                    .HasColumnOrder(28);

                b.Property<int>("QuantityInStock")
                    .HasColumnType("int")
                    .HasColumnName("quantityInStock")
                    .HasColumnOrder(26);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.Property<DateTime?>("SaleEndDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("saleEndDate")
                    .HasColumnOrder(36)
                    .HasDefaultValueSql("('1900-01-01 00:00:00.000')");

                b.Property<string>("ShortDescription")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("shortDescription")
                    .HasColumnOrder(22);

                b.Property<decimal>("Tax_pct")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("tax_pct")
                    .HasColumnOrder(30);

                b.Property<string>("UserCreated")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userCreated")
                    .HasColumnOrder(992);

                b.Property<string>("UserModified")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userModified")
                    .HasColumnOrder(994);

                b.Property<decimal>("Vat_pct")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("vat_pct")
                    .HasColumnOrder(29);

                b.HasKey("Id");

                b.HasIndex(new[] { "CommodityId" }, "IX_Product_commodityId");

                b.HasIndex(new[] { "ConsumableId" }, "IX_Product_consumableId");

                b.HasIndex(new[] { "PackageId" }, "IX_Product_packageId");

                b.HasIndex(new[] { "Id" }, "UQ_Product_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_Product_id"), 90);

                b.ToTable("Product", "cmd");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Commodities.Models.dbo.DeliveryMethod", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id")
                    .HasColumnOrder(0);

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Details")
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)")
                    .HasColumnName("details")
                    .HasColumnOrder(12);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("OwnerId")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("ownerId")
                    .HasColumnOrder(995);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_DeliveryMethod_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_DeliveryMethod_id"), 90);

                b.ToTable("DeliveryMethod", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.CropLifeCycleStage", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id")
                    .HasColumnOrder(0);

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Details")
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)")
                    .HasColumnName("details")
                    .HasColumnOrder(12);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("OwnerId")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("ownerId")
                    .HasColumnOrder(995);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_CropLifeCycleStage_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_CropLifeCycleStage_id"), 90);

                b.ToTable("CropLifeCycleStage", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.FarmAgriculture", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id")
                    .HasColumnOrder(0);

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Details")
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)")
                    .HasColumnName("details")
                    .HasColumnOrder(12);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("OwnerId")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("ownerId")
                    .HasColumnOrder(995);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_FarmAgriculture_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_FarmAgriculture_id"), 90);

                b.ToTable("FarmAgriculture", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.FarmCulture", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id")
                    .HasColumnOrder(0);

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Details")
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)")
                    .HasColumnName("details")
                    .HasColumnOrder(12);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("OwnerId")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("ownerId")
                    .HasColumnOrder(995);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_FarmCulture_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_FarmCulture_id"), 90);

                b.ToTable("FarmCulture", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.GrowMediumDetail", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Colour")
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("colour");

                b.Property<string>("Consistency")
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("consistency");

                b.Property<string>("Density")
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("density");

                b.Property<int>("GrowMediumTypeId")
                    .HasColumnType("int")
                    .HasColumnName("growMediumTypeId");

                b.Property<string>("Porosity")
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("porosity");

                b.Property<string>("Resistivity")
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("resistivity");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.Property<string>("Structure")
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("structure");

                b.Property<string>("Temperature")
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("temperature");

                b.Property<string>("Texture")
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("texture");

                b.Property<string>("WaterFlow")
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("waterFlow");

                b.Property<string>("WaterRetention")
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("waterRetention");

                b.HasKey("Id");

                b.HasIndex(new[] { "GrowMediumTypeId" }, "IX_GrowMediumDetail_growMediumTypeId");

                b.HasIndex(new[] { "Id" }, "UQ_GrowMediumDetail_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_GrowMediumDetail_id"), 90);

                b.ToTable("GrowMediumDetail", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.GrowMediumType", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id")
                    .HasColumnOrder(0);

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Details")
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)")
                    .HasColumnName("details")
                    .HasColumnOrder(12);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("OwnerId")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("ownerId")
                    .HasColumnOrder(995);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_GrowMediumType_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_GrowMediumType_id"), 90);

                b.ToTable("GrowMediumType", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.GrowSpaceDataEntryType", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id")
                    .HasColumnOrder(0);

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Details")
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)")
                    .HasColumnName("details")
                    .HasColumnOrder(12);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("OwnerId")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("ownerId")
                    .HasColumnOrder(995);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_GrowSpaceDataEntryType_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_GrowSpaceDataEntryType_id"), 90);

                b.ToTable("GrowSpaceDataEntryType", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.GrowSpaceLightSourceType", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id")
                    .HasColumnOrder(0);

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Details")
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)")
                    .HasColumnName("details")
                    .HasColumnOrder(12);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("OwnerId")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("ownerId")
                    .HasColumnOrder(995);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_GrowSpaceLightSourceType_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_GrowSpaceLightSourceType_id"), 90);

                b.ToTable("GrowSpaceLightSourceType", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.GrowSpaceSetupType", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id")
                    .HasColumnOrder(0);

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Details")
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)")
                    .HasColumnName("details")
                    .HasColumnOrder(12);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("OwnerId")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("ownerId")
                    .HasColumnOrder(995);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_GrowSpaceSetupType_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_GrowSpaceSetupType_id"), 90);

                b.ToTable("GrowSpaceSetupType", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.GrowSpaceType", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id")
                    .HasColumnOrder(0);

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Details")
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)")
                    .HasColumnName("details")
                    .HasColumnOrder(12);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("OwnerId")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("ownerId")
                    .HasColumnOrder(995);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_GrowSpaceType_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_GrowSpaceType_id"), 90);

                b.ToTable("GrowSpaceType", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.ZoneClassification", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id")
                    .HasColumnOrder(0);

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Details")
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)")
                    .HasColumnName("details")
                    .HasColumnOrder(12);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("OwnerId")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("ownerId")
                    .HasColumnOrder(995);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_ZoneClassification_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_ZoneClassification_id"), 90);

                b.ToTable("ZoneClassification", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.ZoneClimateType", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Details")
                    .HasMaxLength(150)
                    .HasColumnType("nvarchar(150)")
                    .HasColumnName("details");

                b.Property<string>("KoppenGeiger")
                    .HasMaxLength(150)
                    .HasColumnType("nvarchar(150)")
                    .HasColumnName("koppenGeiger");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.Property<string>("Simple")
                    .HasMaxLength(1)
                    .HasColumnType("nvarchar(1)")
                    .HasColumnName("simple");

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_ZoneClimatType_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_ZoneClimatType_id"), 90);

                b.ToTable("ZoneClimateType", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.frm.Farm", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasColumnOrder(0)
                    .HasDefaultValueSql("(newid())");

                b.Property<int>("AgricultureApproachId")
                    .HasColumnType("int")
                    .HasColumnName("agricultureApproachId")
                    .HasColumnOrder(22);

                b.Property<string>("BorderDetails")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("borderDetails")
                    .HasColumnOrder(23);

                b.Property<int>("CultureId")
                    .HasColumnType("int")
                    .HasColumnName("cultureId")
                    .HasColumnOrder(21);

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasColumnOrder(991);

                b.Property<DateTime>("DateModified")
                    .HasColumnType("datetime")
                    .HasColumnName("dateModified")
                    .HasColumnOrder(993);

                b.Property<bool>("DiseaseControlManagement")
                    .HasColumnType("bit")
                    .HasColumnName("diseaseControlManagement")
                    .HasColumnOrder(30);

                b.Property<bool>("EnergyManagement")
                    .HasColumnType("bit")
                    .HasColumnName("energyManagement")
                    .HasColumnOrder(29);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<bool>("NutrientsManagement")
                    .HasColumnType("bit")
                    .HasColumnName("nutrientsManagement")
                    .HasColumnOrder(28);

                b.Property<bool>("PestsManagement")
                    .HasColumnType("bit")
                    .HasColumnName("pestsManagement")
                    .HasColumnOrder(32);

                b.Property<decimal?>("PropertyArea_m2")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("propertyArea_m2")
                    .HasColumnOrder(24)
                    .HasDefaultValueSql("((0))");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.Property<bool>("SoilAndGrowMedium")
                    .HasColumnType("bit")
                    .HasColumnName("soilAndGrowMedium")
                    .HasColumnOrder(26);

                b.Property<string>("SpeciesPreference")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("speciesPreference")
                    .HasColumnOrder(25);

                b.Property<bool>("SustainabilityManagement")
                    .HasColumnType("bit")
                    .HasColumnName("sustainabilityManagement")
                    .HasColumnOrder(31);

                b.Property<Guid>("TraderEntityId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("traderEntityId")
                    .HasColumnOrder(5);

                b.Property<string>("UserCreated")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userCreated")
                    .HasColumnOrder(992);

                b.Property<string>("UserModified")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userModified")
                    .HasColumnOrder(994);

                b.Property<bool>("WaterManagement")
                    .HasColumnType("bit")
                    .HasColumnName("waterManagement")
                    .HasColumnOrder(27);

                b.Property<bool>("WeedsManagement")
                    .HasColumnType("bit")
                    .HasColumnName("weedsManagement")
                    .HasColumnOrder(33);

                b.HasKey("Id");

                b.HasIndex(new[] { "AgricultureApproachId" }, "IX_Farm_agricultureApproachId");

                b.HasIndex(new[] { "CultureId" }, "IX_Farm_cultureId");

                b.HasIndex(new[] { "TraderEntityId" }, "IX_Farm_traderEntityId");

                b.HasIndex(new[] { "Id" }, "UQ_Farm_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_Farm_id"), 90);

                b.ToTable("Farm", "frm");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.frm.GrowSpace", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasColumnOrder(0)
                    .HasDefaultValueSql("(newid())");

                b.Property<string>("AssignedWorkerId")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("assignedWorkerId")
                    .HasColumnOrder(21);

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasColumnOrder(991);

                b.Property<DateTime>("DateModified")
                    .HasColumnType("datetime")
                    .HasColumnName("dateModified")
                    .HasColumnOrder(993);

                b.Property<int>("GrowMediumTypeId")
                    .HasColumnType("int")
                    .HasColumnName("growMediumTypeId")
                    .HasColumnOrder(24);

                b.Property<int>("GrowSpaceTypeId")
                    .HasColumnType("int")
                    .HasColumnName("growSpaceTypeId")
                    .HasColumnOrder(23);

                b.Property<int>("LightSourceTypeId")
                    .HasColumnType("int")
                    .HasColumnName("lightSourceTypeId")
                    .HasColumnOrder(25);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("OrientationFromLightSource")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("orientationFromLightSource")
                    .HasColumnOrder(26);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.Property<int>("SetupTypeId")
                    .HasColumnType("int")
                    .HasColumnName("setupTypeId")
                    .HasColumnOrder(22);

                b.Property<decimal>("TotalAvailableSpace_m2")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("totalAvailableSpace_m2")
                    .HasColumnOrder(27);

                b.Property<string>("UserCreated")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userCreated")
                    .HasColumnOrder(992);

                b.Property<string>("UserModified")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userModified")
                    .HasColumnOrder(994);

                b.Property<Guid>("ZoneId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("zoneId")
                    .HasColumnOrder(5);

                b.Property<int>("ZoneOrder")
                    .HasColumnType("int")
                    .HasColumnName("zoneOrder")
                    .HasColumnOrder(28);

                b.HasKey("Id");

                b.HasIndex(new[] { "AssignedWorkerId" }, "IX_GrowSpace_assignedWorkerId");

                b.HasIndex(new[] { "GrowMediumTypeId" }, "IX_GrowSpace_growMediumTypeId");

                b.HasIndex(new[] { "GrowSpaceTypeId" }, "IX_GrowSpace_growSpaceTypeId");

                b.HasIndex(new[] { "LightSourceTypeId" }, "IX_GrowSpace_lightSourceTypeId");

                b.HasIndex(new[] { "SetupTypeId" }, "IX_GrowSpace_setupTypeId");

                b.HasIndex(new[] { "ZoneId" }, "IX_GrowSpace_zoneId");

                b.HasIndex(new[] { "Id" }, "UQ_GrowSpace_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_GrowSpace_id"), 90);

                b.ToTable("GrowSpace", "frm");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.frm.SubArea", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasColumnOrder(0)
                    .HasDefaultValueSql("(newid())");

                b.Property<long?>("CropId")
                    .HasColumnType("bigint")
                    .HasColumnName("cropId")
                    .HasColumnOrder(21);

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasColumnOrder(991);

                b.Property<DateTime>("DateModified")
                    .HasColumnType("datetime")
                    .HasColumnName("dateModified")
                    .HasColumnOrder(993);

                b.Property<DateTime>("DatePlanted")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("datePlanted")
                    .HasColumnOrder(25)
                    .HasDefaultValueSql("('1900-01-01 00:00:00.000')");

                b.Property<DateTime>("EstHarvestDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("estHarvestDate")
                    .HasColumnOrder(26)
                    .HasDefaultValueSql("('1900-01-01 00:00:00.000')");

                b.Property<Guid>("GrowSpaceId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("growSpaceId")
                    .HasColumnOrder(5);

                b.Property<int>("GrowSpaceOrder")
                    .HasColumnType("int")
                    .HasColumnName("growSpaceOrder")
                    .HasColumnOrder(27);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<int>("NumberOfSeeds")
                    .HasColumnType("int")
                    .HasColumnName("numberOfSeeds")
                    .HasColumnOrder(23);

                b.Property<decimal>("PlantSpacing_cm")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("plantSpacing_cm")
                    .HasColumnOrder(22);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.Property<int>("StartPosition")
                    .HasColumnType("int")
                    .HasColumnName("startPosition")
                    .HasColumnOrder(24);

                b.Property<string>("UserCreated")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userCreated")
                    .HasColumnOrder(992);

                b.Property<string>("UserModified")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userModified")
                    .HasColumnOrder(994);

                b.HasKey("Id");

                b.HasIndex(new[] { "CropId" }, "IX_SubArea_cropId");

                b.HasIndex(new[] { "GrowSpaceId" }, "IX_SubArea_growSpaceId");

                b.HasIndex(new[] { "Id" }, "UQ_SubArea_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_SubArea_id"), 90);

                b.ToTable("SubArea", "frm");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.frm.Zone", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasColumnOrder(0)
                    .HasDefaultValueSql("(newid())");

                b.Property<int>("ClassificationTypeId")
                    .HasColumnType("int")
                    .HasColumnName("classificationTypeId")
                    .HasColumnOrder(22);

                b.Property<int?>("ClimateTypeId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("climateTypeId")
                    .HasColumnOrder(23)
                    .HasDefaultValueSql("((0))");

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasColumnOrder(991);

                b.Property<DateTime>("DateModified")
                    .HasColumnType("datetime")
                    .HasColumnName("dateModified")
                    .HasColumnOrder(993);

                b.Property<Guid>("FarmId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("farmId")
                    .HasColumnOrder(5);

                b.Property<int>("FarmOrder")
                    .HasColumnType("int")
                    .HasColumnName("farmOrder")
                    .HasColumnOrder(25);

                b.Property<string>("ManagerBaseUserId")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("managerBaseUserId")
                    .HasColumnOrder(21);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.Property<decimal>("TotalAvailableSpace_m2")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("totalAvailableSpace_m2")
                    .HasColumnOrder(24);

                b.Property<string>("UserCreated")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userCreated")
                    .HasColumnOrder(992);

                b.Property<string>("UserModified")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userModified")
                    .HasColumnOrder(994);

                b.HasKey("Id");

                b.HasIndex(new[] { "ClassificationTypeId" }, "IX_Zone_classificationTypeId");

                b.HasIndex(new[] { "ClimateTypeId" }, "IX_Zone_climateTypeId");

                b.HasIndex(new[] { "FarmId" }, "IX_Zone_farmId");

                b.HasIndex(new[] { "ManagerBaseUserId" }, "IX_Zone_managerBaseUserId");

                b.HasIndex(new[] { "Id" }, "UQ_Zone_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_Zone_id"), 90);

                b.ToTable("Zone", "frm");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.log.GrowSpaceDatum", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                b.Property<string>("Comment")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("comment");

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasDefaultValueSql("('1900-01-01 00:00:00.000')");

                b.Property<int>("EntryTypeId")
                    .HasColumnType("int")
                    .HasColumnName("entryTypeId");

                b.Property<Guid>("GrowSpaceId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("growSpaceId");

                b.Property<decimal>("Humidity_gpm3")
                    .HasColumnType("decimal(7,3)")
                    .HasColumnName("humidity_gpm3");

                b.Property<decimal>("PhLevel")
                    .HasColumnType("decimal(6,4)")
                    .HasColumnName("phLevel");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.Property<decimal>("Temperature__C")
                    .HasColumnType("decimal(7,3)")
                    .HasColumnName("temperature_°C");

                b.HasKey("Id");

                b.HasIndex(new[] { "EntryTypeId" }, "IX_GrowSpaceDatum_entryTypeId");

                b.HasIndex(new[] { "GrowSpaceId" }, "IX_GrowSpaceDatum_growSpaceId");

                b.HasIndex(new[] { "Id" }, "UQ_GrowSpaceDatum_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_GrowSpaceDatum_id"), 90);

                b.ToTable("GrowSpaceDatum", "log");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.log.SubAreaHarvestDatum", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasColumnOrder(0)
                    .HasDefaultValueSql("(newid())");

                b.Property<byte[]>("ActualPhoto")
                    .HasColumnType("varbinary(max)")
                    .HasColumnName("actualPhoto")
                    .HasColumnOrder(21);

                b.Property<string>("Botany")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("botany")
                    .HasColumnOrder(44);

                b.Property<string>("Comments")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("comments")
                    .HasColumnOrder(32);

                b.Property<string>("Cultivation")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("cultivation")
                    .HasColumnOrder(40);

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasColumnOrder(991);

                b.Property<DateTime?>("DateHarvested")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateHarvested")
                    .HasColumnOrder(23)
                    .HasDefaultValueSql("('1900-01-01 00:00:00.000')");

                b.Property<DateTime>("DateModified")
                    .HasColumnType("datetime")
                    .HasColumnName("dateModified")
                    .HasColumnOrder(993);

                b.Property<string>("Ecology")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("ecology")
                    .HasColumnOrder(43);

                b.Property<decimal?>("Height")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("height")
                    .HasColumnOrder(27);

                b.Property<string>("History")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("history")
                    .HasColumnOrder(45);

                b.Property<int?>("ItemCountTotal")
                    .HasColumnType("int")
                    .HasColumnName("itemCountTotal")
                    .HasColumnOrder(24);

                b.Property<decimal?>("Length")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("length")
                    .HasColumnOrder(25);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("NaturalRange")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("naturalRange")
                    .HasColumnOrder(35);

                b.Property<string>("Nutrition")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("nutrition")
                    .HasColumnOrder(37);

                b.Property<string>("PestsAndDiseases")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("pestsAndDiseases")
                    .HasColumnOrder(41);

                b.Property<long?>("PlantId")
                    .HasColumnType("bigint")
                    .HasColumnName("plantId")
                    .HasColumnOrder(22);

                b.Property<string>("Production")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("production")
                    .HasColumnOrder(38);

                b.Property<string>("QuantityGrade")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("quantityGrade")
                    .HasColumnOrder(30);

                b.Property<string>("Reproduction")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("reproduction")
                    .HasColumnOrder(39);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.Property<string>("StorageAndTransport")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("storageAndTransport")
                    .HasColumnOrder(42);

                b.Property<string>("StorageDetails")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("storageDetails")
                    .HasColumnOrder(31);

                b.Property<Guid?>("SubAreaId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("subAreaId")
                    .HasColumnOrder(5);

                b.Property<string>("Synonyms")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("synonyms")
                    .HasColumnOrder(33);

                b.Property<string>("UserCreated")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userCreated")
                    .HasColumnOrder(992);

                b.Property<string>("UserModified")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userModified")
                    .HasColumnOrder(994);

                b.Property<string>("Uses")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("uses")
                    .HasColumnOrder(36);

                b.Property<string>("Varieties")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("varieties")
                    .HasColumnOrder(34);

                b.Property<decimal?>("Volume")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("volume")
                    .HasColumnOrder(29);

                b.Property<decimal?>("Weight")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("weight")
                    .HasColumnOrder(28);

                b.Property<decimal?>("Width")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("width")
                    .HasColumnOrder(26);

                b.HasKey("Id");

                b.HasIndex(new[] { "PlantId" }, "IX_SubAreaHarvestDatum_plantId");

                b.HasIndex(new[] { "SubAreaId" }, "IX_SubAreaHarvestDatum_subAreaId");

                b.HasIndex(new[] { "Id" }, "UQ_SubAreaHarvestDatum_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_SubAreaHarvestDatum_id"), 90);

                b.ToTable("SubAreaHarvestDatum", "log");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.log.SubAreaPlantfoodDatum", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                b.Property<string>("Comment")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("comment");

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasDefaultValueSql("('1900-01-01 00:00:00.000')");

                b.Property<string>("NutrientDetails")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("nutrientDetails");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.Property<Guid>("SubAreaId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("subAreaId");

                b.HasKey("Id");

                b.HasIndex(new[] { "SubAreaId" }, "IX_SubAreaPlantfoodDatum_subAreaId");

                b.HasIndex(new[] { "Id" }, "UQ_SubAreaPlantfoodDatum_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_SubAreaPlantfoodDatum_id"), 90);

                b.ToTable("SubAreaPlantfoodDatum", "log");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.log.SubAreaStatusDatum", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                b.Property<string>("Comment")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("comment");

                b.Property<int>("CropLifeCycleStageId")
                    .HasColumnType("int")
                    .HasColumnName("cropLifeCycleStageId");

                b.Property<byte[]>("CropPhoto")
                    .HasColumnType("varbinary(max)")
                    .HasColumnName("cropPhoto");

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasDefaultValueSql("('1900-01-01 00:00:00.000')");

                b.Property<string>("Health")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("health");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.Property<Guid>("SubAreaId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("subAreaId");

                b.HasKey("Id");

                b.HasIndex(new[] { "CropLifeCycleStageId" }, "IX_SubAreaStatusDatum_cropLifeCycleStageId");

                b.HasIndex(new[] { "SubAreaId" }, "IX_SubAreaStatusDatum_subAreaId");

                b.HasIndex(new[] { "Id" }, "UQ_SubAreaStatusDatum_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_SubAreaStatusDatum_id"), 90);

                b.ToTable("SubAreaStatusDatum", "log");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.log.SubAreaWaterDatum", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                b.Property<decimal>("Amount_ml")
                    .HasColumnType("decimal(10,2)")
                    .HasColumnName("amount_ml");

                b.Property<string>("Comment")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("comment");

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasDefaultValueSql("('1900-01-01 00:00:00.000')");

                b.Property<string>("Duration_Time")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("duration_Time");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.Property<Guid>("SubAreaId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("subAreaId");

                b.HasKey("Id");

                b.HasIndex(new[] { "SubAreaId" }, "IX_SubAreaWaterDatum_subAreaId");

                b.HasIndex(new[] { "Id" }, "UQ_SubAreaWaterDatum_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_SubAreaWaterDatum_id"), 90);

                b.ToTable("SubAreaWaterDatum", "log");
            });

            modelBuilder.Entity("SourceItFresh.Areas.ManageOrg_Accounts.Models.sec.ApplicationSection", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasColumnOrder(0)
                    .HasDefaultValueSql("(newid())");

                b.Property<bool>("CanAdd")
                    .HasColumnType("bit")
                    .HasColumnName("canAdd")
                    .HasColumnOrder(22);

                b.Property<bool>("CanDelete")
                    .HasColumnType("bit")
                    .HasColumnName("canDelete")
                    .HasColumnOrder(24);

                b.Property<bool>("CanUpdate")
                    .HasColumnType("bit")
                    .HasColumnName("canUpdate")
                    .HasColumnOrder(23);

                b.Property<bool>("CanView")
                    .HasColumnType("bit")
                    .HasColumnName("canView")
                    .HasColumnOrder(21);

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasColumnOrder(991);

                b.Property<DateTime>("DateModified")
                    .HasColumnType("datetime")
                    .HasColumnName("dateModified")
                    .HasColumnOrder(993);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("Path")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("path")
                    .HasColumnOrder(5);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.Property<string>("UserCreated")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userCreated")
                    .HasColumnOrder(992);

                b.Property<string>("UserModified")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userModified")
                    .HasColumnOrder(994);

                b.HasKey("Id");

                b.HasIndex(new[] { "Name" }, "UQ_ApplicationSection_Name")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Name" }, "UQ_ApplicationSection_Name"), 90);

                b.ToTable("ApplicationSection", "sec");
            });

            modelBuilder.Entity("SourceItFresh.Areas.ManageOrg_Accounts.Models.sec.PermissionDetail", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                b.Property<bool>("AllowedAdd")
                    .HasColumnType("bit")
                    .HasColumnName("allowedAdd");

                b.Property<bool>("AllowedDelete")
                    .HasColumnType("bit")
                    .HasColumnName("allowedDelete");

                b.Property<bool>("AllowedUpdate")
                    .HasColumnType("bit")
                    .HasColumnName("allowedUpdate");

                b.Property<bool>("AllowedView")
                    .HasColumnType("bit")
                    .HasColumnName("allowedView");

                b.Property<Guid>("ApplicationSectionId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("applicationSectionId");

                b.Property<DateTime>("DateModified")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateModified")
                    .HasDefaultValueSql("('1900-01-01 00:00:00.000')");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.Property<Guid>("SecurityGroupId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("securityGroupId");

                b.Property<string>("UserModified")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userModified");

                b.HasKey("Id");

                b.HasIndex(new[] { "ApplicationSectionId" }, "IX_PermissionDetail_applicationSectionId");

                b.HasIndex(new[] { "SecurityGroupId" }, "IX_PermissionDetail_securityGroupId");

                b.HasIndex(new[] { "UserModified" }, "IX_PermissionDetail_userModified");

                b.HasIndex(new[] { "Id" }, "UQ_PermissionDetail_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_PermissionDetail_id"), 90);

                b.ToTable("PermissionDetail", "sec");
            });

            modelBuilder.Entity("SourceItFresh.Areas.ManageOrg_Accounts.Models.sec.SecurityGroup", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasColumnOrder(0)
                    .HasDefaultValueSql("(newid())");

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasColumnOrder(991);

                b.Property<DateTime>("DateModified")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateModified")
                    .HasColumnOrder(993)
                    .HasDefaultValueSql("('1900-01-01 00:00:00.000')");

                b.Property<bool>("IsSystemConfig")
                    .HasColumnType("bit")
                    .HasColumnName("isSystemConfig")
                    .HasColumnOrder(21);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.Property<string>("TraderEntityOwnerId")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("traderEntityOwnerId")
                    .HasColumnOrder(22);

                b.Property<string>("UserCreated")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userCreated")
                    .HasColumnOrder(992);

                b.Property<string>("UserModified")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userModified")
                    .HasColumnOrder(994);

                b.HasKey("Id");

                b.HasIndex(new[] { "TraderEntityOwnerId" }, "IX_SecurityGroup_traderEntityOwnerId");

                b.HasIndex(new[] { "UserCreated" }, "IX_SecurityGroup_userCreated");

                b.HasIndex(new[] { "UserModified" }, "IX_SecurityGroup_userModified");

                b.HasIndex(new[] { "Id" }, "UQ_SecurityGroup_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_SecurityGroup_id"), 90);

                b.ToTable("SecurityGroup", "sec");
            });

            modelBuilder.Entity("SourceItFresh.Areas.ManageOrg_ActionLogs.Models.log.ActionHistory", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                b.Property<string>("ActionType")
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnType("nvarchar(30)")
                    .HasColumnName("actionType");

                b.Property<string>("Area")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("area");

                b.Property<string>("BaseUserId")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("baseUserId");

                b.Property<DateTime>("DateCreated")
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated");

                b.Property<string>("Details")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("details");

                b.Property<Guid>("RowId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("rowId");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.Property<Guid>("TraderEntityId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("traderEntityId");

                b.HasKey("Id");

                b.HasIndex(new[] { "BaseUserId" }, "IX_ActionHistory_baseUserId");

                b.HasIndex(new[] { "TraderEntityId" }, "IX_ActionHistory_traderEntityId");

                b.HasIndex(new[] { "Id" }, "UQ_ActionHistory_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_ActionHistory_id"), 90);

                b.ToTable("ActionHistory", "log");
            });

            modelBuilder.Entity("SourceItFresh.Areas.ManageOrg_TraderEntity.Models.dbo.MunicipalityDetail", b =>
            {
                b.Property<long>("Id")
                    .HasColumnType("bigint")
                    .HasColumnName("id");

                b.Property<string>("Address")
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("address");

                b.Property<string>("AmbulanceContactDetails")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("ambulanceContactDetails");

                b.Property<string>("ElectricityDepartmentContactDetails")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("electricityDepartmentContactDetails");

                b.Property<string>("FireDepartmentContactDetails")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("fireDepartmentContactDetails");

                b.Property<string>("MunicipalityContactDetails")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("municipalityContactDetails");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name");

                b.Property<string>("PoliceContactDetails")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("policeContactDetails");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.Property<string>("WaterDepartmentContactDetails")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("waterDepartmentContactDetails");

                b.HasKey("Id");

                b.HasIndex(new[] { "Name" }, "UQ_MunicipalityDetail_Name")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Name" }, "UQ_MunicipalityDetail_Name"), 90);

                b.ToTable("MunicipalityDetail", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.ManageOrg_TraderEntity.Models.dbo.TraderType", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id")
                    .HasColumnOrder(0);

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Details")
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)")
                    .HasColumnName("details")
                    .HasColumnOrder(12);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("OwnerId")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("ownerId")
                    .HasColumnOrder(995);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.HasKey("Id");

                b.HasIndex(new[] { "Name" }, "UQ_TraderType_Name")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Name" }, "UQ_TraderType_Name"), 90);

                b.ToTable("TraderType", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.ManageOrg_TraderEntity.Models.trd.TraderContactDetail", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                b.Property<string>("CustomerCareEmail")
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnType("nvarchar(200)")
                    .HasColumnName("customerCareEmail");

                b.Property<DateTime>("DateModified")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateModified")
                    .HasDefaultValueSql("('1900-01-01 00:00:00.000')");

                b.Property<string>("OtherDetails")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("otherDetails");

                b.Property<string>("PhoneNumber")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("phoneNumber");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.Property<string>("UserModified")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userModified");

                b.Property<string>("WebsiteUrl")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("websiteUrl");

                b.HasKey("Id");

                b.HasIndex(new[] { "UserModified" }, "IX_TraderContactDetail_userModified");

                b.HasIndex(new[] { "Id" }, "UQ_TraderContactDetail_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_TraderContactDetail_id"), 90);

                b.ToTable("TraderContactDetail", "trd");
            });

            modelBuilder.Entity("SourceItFresh.Areas.ManageOrg_TraderEntity.Models.trd.TraderEntity", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasColumnOrder(0)
                    .HasDefaultValueSql("(newid())");

                b.Property<Guid>("ContactDetailId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("contactDetailId")
                    .HasColumnOrder(23);

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasColumnOrder(991);

                b.Property<DateTime>("DateModified")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateModified")
                    .HasColumnOrder(993)
                    .HasDefaultValueSql("('1900-01-01 00:00:00.000')");

                b.Property<Guid>("LocationId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("locationId")
                    .HasColumnOrder(22);

                b.Property<byte[]>("LogoImage")
                    .HasColumnType("varbinary(max)")
                    .HasColumnName("logoImage")
                    .HasColumnOrder(24);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.Property<int>("TraderTypeId")
                    .HasColumnType("int")
                    .HasColumnName("traderTypeId")
                    .HasColumnOrder(21);

                b.Property<string>("UserCreated")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userCreated")
                    .HasColumnOrder(992);

                b.Property<string>("UserModified")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userModified")
                    .HasColumnOrder(994);

                b.Property<string>("VatNumber")
                    .ValueGeneratedOnAdd()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("vatNumber")
                    .HasColumnOrder(25)
                    .HasDefaultValueSql("('Not Supplied')");

                b.HasKey("Id");

                b.HasIndex(new[] { "ContactDetailId" }, "IX_TraderEntity_contactDetailId");

                b.HasIndex(new[] { "LocationId" }, "IX_TraderEntity_locationId");

                b.HasIndex(new[] { "TraderTypeId" }, "IX_TraderEntity_traderTypeId");

                b.HasIndex(new[] { "UserCreated" }, "IX_TraderEntity_userCreated");

                b.HasIndex(new[] { "UserModified" }, "IX_TraderEntity_userModified");

                b.HasIndex(new[] { "Id" }, "UQ_TraderEntity_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_TraderEntity_id"), 90);

                b.ToTable("TraderEntity", "trd");
            });

            modelBuilder.Entity("SourceItFresh.Areas.ManageOrg_TraderEntity.Models.trd.TraderLocation", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                b.Property<string>("AddressLine1")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("addressLine1");

                b.Property<string>("AddressLine2")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("addressLine2");

                b.Property<string>("Building")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("building");

                b.Property<string>("City")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("city");

                b.Property<string>("CountryRegion")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("countryRegion");

                b.Property<string>("CustomDetails")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("customDetails");

                b.Property<DateTime>("DateModified")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateModified")
                    .HasDefaultValueSql("('1900-01-01 00:00:00.000')");

                b.Property<string>("FloorLevel")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("floorLevel");

                b.Property<string>("GpsCoordinates")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("gpsCoordinates");

                b.Property<byte[]>("MapImage")
                    .HasColumnType("varbinary(max)")
                    .HasColumnName("mapImage");

                b.Property<long?>("MunicipalityId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint")
                    .HasColumnName("municipalityId")
                    .HasDefaultValueSql("('00000000-0000-0000-0000-000000000000')");

                b.Property<string>("PostalCode")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("postalCode");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.Property<string>("StateProvince")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("stateProvince");

                b.Property<string>("UserModified")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userModified");

                b.HasKey("Id");

                b.HasIndex(new[] { "MunicipalityId" }, "IX_TraderLocation_municipalityId");

                b.HasIndex(new[] { "UserModified" }, "IX_TraderLocation_userModified");

                b.HasIndex(new[] { "Id" }, "UQ_TraderLocation_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_TraderLocation_id"), 90);

                b.ToTable("TraderLocation", "trd");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Market_Consumer.Models.mar.Wishlist", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                b.Property<string>("Details")
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)")
                    .HasColumnName("details");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_Wishlist_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_Wishlist_id"), 90);

                b.ToTable("Wishlist", "mar");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Market_Vendor.Models.dbo.CurrencyISO4217", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Code")
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnType("nvarchar(3)")
                    .HasColumnName("code");

                b.Property<string>("CurrencyName")
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasColumnType("nvarchar(75)")
                    .HasColumnName("currencyName");

                b.Property<int?>("PostDecimalDigits")
                    .HasColumnType("int")
                    .HasColumnName("postDecimalDigits");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.Property<string>("UsedLocations")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("usedLocations");

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_CurrencyISO4217_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_CurrencyISO4217_id"), 90);

                b.ToTable("CurrencyISO4217", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Market_Vendor.Models.dbo.OrderStatus", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id")
                    .HasColumnOrder(0);

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Details")
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)")
                    .HasColumnName("details")
                    .HasColumnOrder(12);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("OwnerId")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("ownerId")
                    .HasColumnOrder(995);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_OrderStatus_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_OrderStatus_id"), 90);

                b.ToTable("OrderStatus", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Market_Vendor.Models.dbo.PaymentType", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id")
                    .HasColumnOrder(0);

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Details")
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)")
                    .HasColumnName("details")
                    .HasColumnOrder(12);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<string>("OwnerId")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("ownerId")
                    .HasColumnOrder(995);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_PaymentType_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_PaymentType_id"), 90);

                b.ToTable("PaymentType", "dbo");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Market_Vendor.Models.mar.Credit", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                b.Property<decimal?>("Amount")
                    .HasColumnType("money")
                    .HasColumnName("amount");

                b.Property<Guid>("CreditorId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("creditorId");

                b.Property<int>("CurrencyISO4217Id")
                    .HasColumnType("int")
                    .HasColumnName("currencyISO4217Id");

                b.Property<Guid>("DebtorId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("debtorId");

                b.Property<string>("Details")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("details");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("Id");

                b.HasIndex(new[] { "CreditorId" }, "IX_Credit_creditorId");

                b.HasIndex(new[] { "CurrencyISO4217Id" }, "IX_Credit_currencyISO4217Id");

                b.HasIndex(new[] { "DebtorId" }, "IX_Credit_debtorId");

                b.HasIndex(new[] { "Id" }, "UQ_Credit_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_Credit_id"), 90);

                b.ToTable("Credit", "mar");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Market_Vendor.Models.mar.Logistic", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                b.Property<Guid>("DeliveryConfigId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("deliveryConfigId");

                b.Property<string>("Details")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("details");

                b.Property<decimal?>("DriverCost")
                    .HasColumnType("money")
                    .HasColumnName("driverCost");

                b.Property<Guid>("OrderId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("orderId");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.Property<decimal?>("TripCostper_xKm")
                    .HasColumnType("money")
                    .HasColumnName("tripCostper_xKm");

                b.HasKey("Id");

                b.HasIndex(new[] { "DeliveryConfigId" }, "IX_Logistic_deliveryConfigId");

                b.HasIndex(new[] { "OrderId" }, "IX_Logistic_orderId");

                b.HasIndex(new[] { "Id" }, "UQ_Logistic_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_Logistic_id"), 90);

                b.ToTable("Logistic", "mar");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Market_Vendor.Models.mar.Order", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                b.Property<Guid>("Buyer_TE_Id")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("buyer_TE_Id");

                b.Property<string>("CustomerInstruction")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("customerInstruction");

                b.Property<DateTime?>("OrderFulfilmentDate")
                    .HasColumnType("datetime")
                    .HasColumnName("orderFulfilmentDate");

                b.Property<DateTime>("OrderPlaced")
                    .HasColumnType("datetime")
                    .HasColumnName("orderPlaced");

                b.Property<int>("OrderStatusId")
                    .HasColumnType("int")
                    .HasColumnName("orderStatusId");

                b.Property<DateTime?>("RequiredDate")
                    .HasColumnType("datetime")
                    .HasColumnName("requiredDate");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("Id");

                b.HasIndex(new[] { "Buyer_TE_Id" }, "IX_Order_buyer_TE_Id");

                b.HasIndex(new[] { "OrderStatusId" }, "IX_Order_orderStatusId");

                b.HasIndex(new[] { "Id" }, "UQ_Order_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_Order_id"), 90);

                b.ToTable("Order", "mar");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Market_Vendor.Models.mar.OrderProduct", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                b.Property<int>("CurrencyISO4217Id")
                    .HasColumnType("int")
                    .HasColumnName("currencyISO4217Id");

                b.Property<decimal?>("CustomPriceValue")
                    .HasColumnType("money")
                    .HasColumnName("customPriceValue");

                b.Property<Guid>("OrderId")
                    .IsConcurrencyToken()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("orderId");

                b.Property<decimal>("PriceEach")
                    .HasColumnType("money")
                    .HasColumnName("priceEach");

                b.Property<Guid>("ProductId")
                    .IsConcurrencyToken()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("productId");

                b.Property<int>("Quantity")
                    .HasColumnType("int")
                    .HasColumnName("quantity");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("Id");

                b.HasIndex(new[] { "CurrencyISO4217Id" }, "IX_OrderProduct_currencyISO4217Id");

                b.HasIndex(new[] { "OrderId" }, "IX_OrderProduct_orderId");

                b.HasIndex(new[] { "ProductId" }, "IX_OrderProduct_productId");

                b.HasIndex(new[] { "Id" }, "UQ_OrderProducts_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_OrderProducts_id"), 90);

                b.ToTable("OrderProduct", "mar");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Market_Vendor.Models.mar.Payment", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                b.Property<int>("CurrencyISO4217Id")
                    .HasColumnType("int")
                    .HasColumnName("currencyISO4217Id");

                b.Property<decimal>("DepositAmount")
                    .HasColumnType("money")
                    .HasColumnName("depositAmount");

                b.Property<string>("Details")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("details");

                b.Property<bool>("IsPaidInFull")
                    .HasColumnType("bit")
                    .HasColumnName("isPaidInFull");

                b.Property<Guid>("OrderId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("orderId");

                b.Property<decimal?>("OutstandingAmount")
                    .HasColumnType("money")
                    .HasColumnName("outstandingAmount");

                b.Property<string>("PaidBy")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("paidBy");

                b.Property<DateTime?>("PaymentDate")
                    .HasColumnType("datetime")
                    .HasColumnName("paymentDate");

                b.Property<int>("PaymentTypeId")
                    .HasColumnType("int")
                    .HasColumnName("paymentTypeId");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion");

                b.HasKey("Id");

                b.HasIndex(new[] { "CurrencyISO4217Id" }, "IX_Payment_currencyISO4217Id");

                b.HasIndex(new[] { "OrderId" }, "IX_Payment_orderId");

                b.HasIndex(new[] { "PaymentTypeId" }, "IX_Payment_paymentTypeId");

                b.HasIndex(new[] { "Id" }, "UQ_Payment_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_Payment_id"), 90);

                b.ToTable("Payment", "mar");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Market_Vendor.Models.mar.Stock", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("id")
                    .HasColumnOrder(0)
                    .HasDefaultValueSql("(newid())");

                b.Property<DateTime>("DateCreated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasColumnOrder(991);

                b.Property<DateTime>("DateModified")
                    .HasColumnType("datetime")
                    .HasColumnName("dateModified")
                    .HasColumnOrder(993);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("name")
                    .HasColumnOrder(11);

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion")
                    .HasColumnName("rowVersion")
                    .HasColumnOrder(999);

                b.Property<Guid>("Te_id")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("te_id")
                    .HasColumnOrder(5);

                b.Property<string>("UserCreated")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userCreated")
                    .HasColumnOrder(992);

                b.Property<string>("UserModified")
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnType("nvarchar(450)")
                    .HasColumnName("userModified")
                    .HasColumnOrder(994);

                b.HasKey("Id");

                b.HasIndex(new[] { "Id" }, "UQ_Stock_id")
                    .IsUnique();

                SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "UQ_Stock_id"), 90);

                b.ToTable("Stock", "mar");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Division_DivisionClass", b =>
            {
                b.HasOne("SourceItFresh.Areas.Base_Discover.Models.plt.DivisionClass", "DivisionClass")
                    .WithMany("Division_DivisionClasses")
                    .HasForeignKey("DivisionClassId")
                    .IsRequired()
                    .HasConstraintName("FK_Division_DivisionClass_DivisionClass");

                b.HasOne("SourceItFresh.Areas.Base_Discover.Models.plt.Division", "Division")
                    .WithMany("Division_DivisionClasses")
                    .HasForeignKey("DivisionId")
                    .IsRequired()
                    .HasConstraintName("FK_Division_DivisionClass_Division");

                b.Navigation("Division");

                b.Navigation("DivisionClass");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.DivisionClass_DivisionOrder", b =>
            {
                b.HasOne("SourceItFresh.Areas.Base_Discover.Models.plt.DivisionClass", "DivisionClass")
                    .WithMany("DivisionClass_DivisionOrders")
                    .HasForeignKey("DivisionClassId")
                    .IsRequired()
                    .HasConstraintName("FK_DivisionClass_DivisionOrder_DivisionClass");

                b.HasOne("SourceItFresh.Areas.Base_Discover.Models.plt.DivisionOrder", "DivisionOrder")
                    .WithMany("DivisionClass_DivisionOrders")
                    .HasForeignKey("DivisionOrderId")
                    .IsRequired()
                    .HasConstraintName("FK_DivisionClass_DivisionOrder_DivisionOrder");

                b.Navigation("DivisionClass");

                b.Navigation("DivisionOrder");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.DivisionOrder_Family", b =>
            {
                b.HasOne("SourceItFresh.Areas.Base_Discover.Models.plt.DivisionOrder", "DivisionOrder")
                    .WithMany("DivisionOrder_Families")
                    .HasForeignKey("DivisionOrderId")
                    .IsRequired()
                    .HasConstraintName("FK_DivisionOrder_Family_Division");

                b.HasOne("SourceItFresh.Areas.Base_Discover.Models.plt.Family", "Family")
                    .WithMany("DivisionOrder_Families")
                    .HasForeignKey("FamilyId")
                    .IsRequired()
                    .HasConstraintName("FK_DivisionOrder_Family_DivisionOrder");

                b.Navigation("DivisionOrder");

                b.Navigation("Family");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Family_Genus", b =>
            {
                b.HasOne("SourceItFresh.Areas.Base_Discover.Models.plt.Family", "Family")
                    .WithMany("Family_Genus")
                    .HasForeignKey("FamilyId")
                    .IsRequired()
                    .HasConstraintName("FK_Family_Genus_Family");

                b.HasOne("SourceItFresh.Areas.Base_Discover.Models.plt.Genus", "Genus")
                    .WithMany("Family_Genus")
                    .HasForeignKey("GenusId")
                    .IsRequired()
                    .HasConstraintName("FK_Family_Genus_Genus");

                b.Navigation("Family");

                b.Navigation("Genus");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Genus_Plant", b =>
            {
                b.HasOne("SourceItFresh.Areas.Base_Discover.Models.plt.Genus", "Genus")
                    .WithMany("Genus_Plants")
                    .HasForeignKey("GenusId")
                    .IsRequired()
                    .HasConstraintName("FK_Genus_Plant_Genus");

                b.HasOne("SourceItFresh.Areas.Base_Discover.Models.plt.Plant", "Plant")
                    .WithMany("Genus_Plants")
                    .HasForeignKey("PlantId")
                    .IsRequired()
                    .HasConstraintName("FK_Genus_Plant_Plant");

                b.Navigation("Genus");

                b.Navigation("Plant");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Kingdom_SubKingdom", b =>
            {
                b.HasOne("SourceItFresh.Areas.Base_Discover.Models.plt.Kingdom", "Kingdom")
                    .WithMany("Kingdom_SubKingdoms")
                    .HasForeignKey("KingdomId")
                    .IsRequired()
                    .HasConstraintName("FK_Kingdom_SubKingdom_Kingdom");

                b.HasOne("SourceItFresh.Areas.Base_Discover.Models.plt.SubKingdom", "SubKingdom")
                    .WithMany("Kingdom_SubKingdoms")
                    .HasForeignKey("SubKingdomId")
                    .IsRequired()
                    .HasConstraintName("FK_Kingdom_SubKingdom_SubKingdom");

                b.Navigation("Kingdom");

                b.Navigation("SubKingdom");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Plant_Species", b =>
            {
                b.HasOne("SourceItFresh.Areas.Base_Discover.Models.plt.Plant", "Plant")
                    .WithMany("Plant_Species")
                    .HasForeignKey("PlantId")
                    .IsRequired()
                    .HasConstraintName("FK_Plant_Species_Plant");

                b.HasOne("SourceItFresh.Areas.Base_Discover.Models.plt.Species", "Species")
                    .WithMany("Plant_Species")
                    .HasForeignKey("SpeciesId")
                    .IsRequired()
                    .HasConstraintName("FK_Plant_Species_Species");

                b.Navigation("Plant");

                b.Navigation("Species");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.SubKingdom_Division", b =>
            {
                b.HasOne("SourceItFresh.Areas.Base_Discover.Models.plt.Division", "Division")
                    .WithMany("SubKingdom_Divisions")
                    .HasForeignKey("DivisionId")
                    .IsRequired()
                    .HasConstraintName("FK_SubKingdom_Division_Division");

                b.HasOne("SourceItFresh.Areas.Base_Discover.Models.plt.SubKingdom", "SubKingdom")
                    .WithMany("SubKingdom_Divisions")
                    .HasForeignKey("SubKingdomId")
                    .IsRequired()
                    .HasConstraintName("FK_SubKingdom_Division_SubKingdom");

                b.Navigation("Division");

                b.Navigation("SubKingdom");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Core_Help.Models.log.Feedback", b =>
            {
                b.HasOne("SourceItFresh.Areas.Core_Help.Models.dbo.FeedbackCategory", "FeedbackCategory")
                    .WithMany("Feedbacks")
                    .HasForeignKey("FeedbackCategoryId")
                    .IsRequired()
                    .HasConstraintName("FK_Feedback_FeedbackCategory");

                b.HasOne("SourceItFresh.Areas.Core_Help.Models.log.FeedbackMetadata", "FeedbackMetadata")
                    .WithMany("Feedbacks")
                    .HasForeignKey("FeedbackMetadataId")
                    .IsRequired()
                    .HasConstraintName("FK_Feedback_FeedbackMetadata");

                b.HasOne("SourceItFresh.Areas.Core_Help.Models.dbo.FeedbackType", "FeedbackType")
                    .WithMany("Feedbacks")
                    .HasForeignKey("FeedbackTypeId")
                    .IsRequired()
                    .HasConstraintName("FK_Feedback_FeedbackType");

                b.Navigation("FeedbackCategory");

                b.Navigation("FeedbackMetadata");

                b.Navigation("FeedbackType");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Core_Help.Models.log.Response", b =>
            {
                b.HasOne("SourceItFresh.Areas.Core_Help.Models.log.Feedback", "Feedback")
                    .WithMany("Responses")
                    .HasForeignKey("FeedbackId")
                    .IsRequired()
                    .HasConstraintName("FK_Response_Feedback");

                b.Navigation("Feedback");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Commodities.Models.cmd.AvailabilitySchedule", b =>
            {
                b.HasOne("SourceItFresh.Areas.Manage_Commodities.Models.cmd.Commodity", "Commodity")
                    .WithMany("AvailabilitySchedules")
                    .HasForeignKey("CommodityId")
                    .IsRequired()
                    .HasConstraintName("FK_AvailabilitySchedule_Commodity");

                b.HasOne("SourceItFresh.Areas.Manage_Commodities.Models.cmd.DeliveryConfig", "DeliveryConfig")
                    .WithMany("AvailabilitySchedules")
                    .HasForeignKey("DeliveryConfigId")
                    .IsRequired()
                    .HasConstraintName("FK_AvailabilitySchedule_DeliveryConfig");

                b.Navigation("Commodity");

                b.Navigation("DeliveryConfig");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Commodities.Models.cmd.Consumable", b =>
            {
                b.HasOne("SourceItFresh.Areas.Manage_Commodities.Models.cmd.Commodity", "Commodity")
                    .WithMany("Consumables")
                    .HasForeignKey("CommodityId")
                    .IsRequired()
                    .HasConstraintName("FK_Consumable_Commodity");

                b.Navigation("Commodity");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Commodities.Models.cmd.DeliveryConfig", b =>
            {
                b.HasOne("SourceItFresh.Areas.Manage_Commodities.Models.cmd.Commodity", "Commodity")
                    .WithMany("DeliveryConfigs")
                    .HasForeignKey("CommodityId")
                    .IsRequired()
                    .HasConstraintName("FK_DeliveryConfig_Commodity");

                b.HasOne("SourceItFresh.Areas.Manage_Commodities.Models.dbo.DeliveryMethod", "DeliveryMethod")
                    .WithMany("DeliveryConfigs")
                    .HasForeignKey("DeliveryMethodId")
                    .IsRequired()
                    .HasConstraintName("FK_DeliveryConfig_DeliveryMethod");

                b.Navigation("Commodity");

                b.Navigation("DeliveryMethod");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Commodities.Models.cmd.Packaging", b =>
            {
                b.HasOne("SourceItFresh.Areas.Manage_Commodities.Models.cmd.Commodity", "Commodity")
                    .WithMany("Packagings")
                    .HasForeignKey("CommodityId")
                    .IsRequired()
                    .HasConstraintName("FK_Packaging_Commodity");

                b.Navigation("Commodity");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Commodities.Models.cmd.PaymentMethod", b =>
            {
                b.HasOne("SourceItFresh.Areas.Manage_Commodities.Models.cmd.Commodity", "Commodity")
                    .WithMany("PaymentMethods")
                    .HasForeignKey("CommodityId")
                    .IsRequired()
                    .HasConstraintName("FK_PaymentMethod_Commodity");

                b.Navigation("Commodity");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Commodities.Models.cmd.Permit", b =>
            {
                b.HasOne("SourceItFresh.Areas.Manage_Commodities.Models.cmd.Commodity", "Commodity")
                    .WithMany("Permits")
                    .HasForeignKey("CommodityId")
                    .IsRequired()
                    .HasConstraintName("FK_Permit_Commodity");

                b.Navigation("Commodity");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Commodities.Models.cmd.Product", b =>
            {
                b.HasOne("SourceItFresh.Areas.Manage_Commodities.Models.cmd.Commodity", "Commodity")
                    .WithMany("Products")
                    .HasForeignKey("CommodityId")
                    .IsRequired()
                    .HasConstraintName("FK_Product_Commodity");

                b.HasOne("SourceItFresh.Areas.Manage_Commodities.Models.cmd.Consumable", "Consumable")
                    .WithMany("Products")
                    .HasForeignKey("ConsumableId")
                    .HasConstraintName("FK_Product_Consumable");

                b.HasOne("SourceItFresh.Areas.Manage_Commodities.Models.cmd.Packaging", "Package")
                    .WithMany("Products")
                    .HasForeignKey("PackageId")
                    .HasConstraintName("FK_Product_Package");

                b.Navigation("Commodity");

                b.Navigation("Consumable");

                b.Navigation("Package");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.GrowMediumDetail", b =>
            {
                b.HasOne("SourceItFresh.Areas.Manage_Farm.Models.dbo.GrowMediumType", "GrowMediumType")
                    .WithMany("GrowMediumDetails")
                    .HasForeignKey("GrowMediumTypeId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("FK_GrowMediumDetail_growMediumTypeId");

                b.Navigation("GrowMediumType");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.frm.Farm", b =>
            {
                b.HasOne("SourceItFresh.Areas.Manage_Farm.Models.dbo.FarmAgriculture", "AgricultureApproach")
                    .WithMany("Farms")
                    .HasForeignKey("AgricultureApproachId")
                    .IsRequired()
                    .HasConstraintName("FK_Farm_agricultureApproachId");

                b.HasOne("SourceItFresh.Areas.Manage_Farm.Models.dbo.FarmCulture", "Culture")
                    .WithMany("Farms")
                    .HasForeignKey("CultureId")
                    .IsRequired()
                    .HasConstraintName("FK_Farm_cultureId");

                b.Navigation("AgricultureApproach");

                b.Navigation("Culture");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.frm.GrowSpace", b =>
            {
                b.HasOne("SourceItFresh.Areas.Manage_Farm.Models.dbo.GrowMediumType", "GrowmediumType")
                    .WithMany("GrowSpaces")
                    .HasForeignKey("GrowMediumTypeId")
                    .IsRequired()
                    .HasConstraintName("FK_GrowSpace_growmediumTypeId");

                b.HasOne("SourceItFresh.Areas.Manage_Farm.Models.dbo.GrowSpaceType", "GrowSpaceType")
                    .WithMany("GrowSpaces")
                    .HasForeignKey("GrowSpaceTypeId")
                    .IsRequired()
                    .HasConstraintName("FK_GrowSpace_growSpaceTypeId");

                b.HasOne("SourceItFresh.Areas.Manage_Farm.Models.dbo.GrowSpaceLightSourceType", "LightSourceType")
                    .WithMany("GrowSpaces")
                    .HasForeignKey("LightSourceTypeId")
                    .IsRequired()
                    .HasConstraintName("FK_GrowSpace_lightSourceTypeId");

                b.HasOne("SourceItFresh.Areas.Manage_Farm.Models.dbo.GrowSpaceSetupType", "GrowSpaceSetupType")
                    .WithMany("GrowSpaces")
                    .HasForeignKey("SetupTypeId")
                    .IsRequired()
                    .HasConstraintName("FK_Zone_setupTypeIdId");

                b.HasOne("SourceItFresh.Areas.Manage_Farm.Models.frm.Zone", "Zone")
                    .WithMany("GrowSpaces")
                    .HasForeignKey("ZoneId")
                    .IsRequired()
                    .HasConstraintName("FK_GrowSpace_zoneId");

                b.Navigation("GrowSpaceSetupType");

                b.Navigation("GrowSpaceType");

                b.Navigation("GrowmediumType");

                b.Navigation("LightSourceType");

                b.Navigation("Zone");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.frm.SubArea", b =>
            {
                b.HasOne("SourceItFresh.Areas.Manage_Farm.Models.frm.GrowSpace", "GrowSpace")
                    .WithMany("SubAreas")
                    .HasForeignKey("GrowSpaceId")
                    .IsRequired()
                    .HasConstraintName("FK_SubArea_growSpaceId");

                b.Navigation("GrowSpace");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.frm.Zone", b =>
            {
                b.HasOne("SourceItFresh.Areas.Manage_Farm.Models.dbo.ZoneClassification", "ClassificationType")
                    .WithMany("Zones")
                    .HasForeignKey("ClassificationTypeId")
                    .IsRequired()
                    .HasConstraintName("FK_Zone_classificationTypeId");

                b.HasOne("SourceItFresh.Areas.Manage_Farm.Models.dbo.ZoneClimateType", "ClimateType")
                    .WithMany("Zones")
                    .HasForeignKey("ClimateTypeId")
                    .HasConstraintName("FK_Zone_climateTypeId");

                b.HasOne("SourceItFresh.Areas.Manage_Farm.Models.frm.Farm", "Farm")
                    .WithMany("Zones")
                    .HasForeignKey("FarmId")
                    .IsRequired()
                    .HasConstraintName("FK_Zone_farmId");

                b.Navigation("ClassificationType");

                b.Navigation("ClimateType");

                b.Navigation("Farm");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.log.GrowSpaceDatum", b =>
            {
                b.HasOne("SourceItFresh.Areas.Manage_Farm.Models.dbo.GrowSpaceDataEntryType", "EntryType")
                    .WithMany("GrowSpaceData")
                    .HasForeignKey("EntryTypeId")
                    .IsRequired()
                    .HasConstraintName("FK_GrowSpaceDatum_entryTypeId");

                b.HasOne("SourceItFresh.Areas.Manage_Farm.Models.frm.GrowSpace", "GrowSpace")
                    .WithMany("GrowSpaceData")
                    .HasForeignKey("GrowSpaceId")
                    .IsRequired()
                    .HasConstraintName("FK_GrowSpaceDatum_growSpaceId");

                b.Navigation("EntryType");

                b.Navigation("GrowSpace");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.log.SubAreaHarvestDatum", b =>
            {
                b.HasOne("SourceItFresh.Areas.Manage_Farm.Models.frm.SubArea", "SubArea")
                    .WithMany("SubAreaHarvestData")
                    .HasForeignKey("SubAreaId")
                    .HasConstraintName("FK_SubAreaHarvestDatum_SubArea");

                b.Navigation("SubArea");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.log.SubAreaPlantfoodDatum", b =>
            {
                b.HasOne("SourceItFresh.Areas.Manage_Farm.Models.frm.SubArea", "SubArea")
                    .WithMany("SubAreaPlantfoodData")
                    .HasForeignKey("SubAreaId")
                    .IsRequired()
                    .HasConstraintName("FK_SubAreaPlantfoodDatum_subAreaId");

                b.Navigation("SubArea");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.log.SubAreaStatusDatum", b =>
            {
                b.HasOne("SourceItFresh.Areas.Manage_Farm.Models.dbo.CropLifeCycleStage", "CropLifeCycleStage")
                    .WithMany("SubAreaStatusData")
                    .HasForeignKey("CropLifeCycleStageId")
                    .IsRequired()
                    .HasConstraintName("FK_SubAreaStatusDatum_cropLifeCycleStageId");

                b.HasOne("SourceItFresh.Areas.Manage_Farm.Models.frm.SubArea", "SubArea")
                    .WithMany("SubAreaStatusData")
                    .HasForeignKey("SubAreaId")
                    .IsRequired()
                    .HasConstraintName("FK_SubAreaStatusDatum_subAreaId");

                b.Navigation("CropLifeCycleStage");

                b.Navigation("SubArea");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.log.SubAreaWaterDatum", b =>
            {
                b.HasOne("SourceItFresh.Areas.Manage_Farm.Models.frm.SubArea", "SubArea")
                    .WithMany("SubAreaWaterData")
                    .HasForeignKey("SubAreaId")
                    .IsRequired()
                    .HasConstraintName("FK_SubAreaWaterDatum_subAreaId");

                b.Navigation("SubArea");
            });

            modelBuilder.Entity("SourceItFresh.Areas.ManageOrg_Accounts.Models.sec.PermissionDetail", b =>
            {
                b.HasOne("SourceItFresh.Areas.ManageOrg_Accounts.Models.sec.ApplicationSection", "ApplicationSection")
                    .WithMany("PermissionDetails")
                    .HasForeignKey("ApplicationSectionId")
                    .IsRequired()
                    .HasConstraintName("FK_PermissionDetail_ApplicationSection");

                b.HasOne("SourceItFresh.Areas.ManageOrg_Accounts.Models.sec.SecurityGroup", "SecurityGroup")
                    .WithMany("PermissionDetails")
                    .HasForeignKey("SecurityGroupId")
                    .IsRequired()
                    .HasConstraintName("FK_PermissionDetail_SecurityGroup");

                b.Navigation("ApplicationSection");

                b.Navigation("SecurityGroup");
            });

            modelBuilder.Entity("SourceItFresh.Areas.ManageOrg_TraderEntity.Models.trd.TraderEntity", b =>
            {
                b.HasOne("SourceItFresh.Areas.ManageOrg_TraderEntity.Models.trd.TraderContactDetail", "ContactDetails")
                    .WithMany("TraderEntities")
                    .HasForeignKey("ContactDetailId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("FK_TraderEntity_TraderContactDetail");

                b.HasOne("SourceItFresh.Areas.ManageOrg_TraderEntity.Models.trd.TraderLocation", "Location")
                    .WithMany("TraderEntities")
                    .HasForeignKey("LocationId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("FK_TraderEntity_TraderLocation");

                b.HasOne("SourceItFresh.Areas.ManageOrg_TraderEntity.Models.dbo.TraderType", "TraderType")
                    .WithMany("TraderEntities")
                    .HasForeignKey("TraderTypeId")
                    .IsRequired()
                    .HasConstraintName("FK_TraderEntity_TraderType");

                b.Navigation("ContactDetails");

                b.Navigation("Location");

                b.Navigation("TraderType");
            });

            modelBuilder.Entity("SourceItFresh.Areas.ManageOrg_TraderEntity.Models.trd.TraderLocation", b =>
            {
                b.HasOne("SourceItFresh.Areas.ManageOrg_TraderEntity.Models.dbo.MunicipalityDetail", "Municipality")
                    .WithMany("TraderLocations")
                    .HasForeignKey("MunicipalityId")
                    .HasConstraintName("FK_TraderLocation_MunicipalityDetail");

                b.Navigation("Municipality");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Market_Vendor.Models.mar.Credit", b =>
            {
                b.HasOne("SourceItFresh.Areas.Market_Vendor.Models.dbo.CurrencyISO4217", "CurrencyISO4217")
                    .WithMany("Credits")
                    .HasForeignKey("CurrencyISO4217Id")
                    .IsRequired()
                    .HasConstraintName("FK_Credit_currencyISO4217Id");

                b.Navigation("CurrencyISO4217");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Market_Vendor.Models.mar.Logistic", b =>
            {
                b.HasOne("SourceItFresh.Areas.Market_Vendor.Models.mar.Order", "Order")
                    .WithMany("Logistics")
                    .HasForeignKey("OrderId")
                    .IsRequired()
                    .HasConstraintName("FK_Logistics_orderId");

                b.Navigation("Order");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Market_Vendor.Models.mar.Order", b =>
            {
                b.HasOne("SourceItFresh.Areas.Market_Vendor.Models.dbo.OrderStatus", "OrderStatus")
                    .WithMany("Orders")
                    .HasForeignKey("OrderStatusId")
                    .IsRequired()
                    .HasConstraintName("FK_Order_orderStatusId");

                b.Navigation("OrderStatus");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Market_Vendor.Models.mar.OrderProduct", b =>
            {
                b.HasOne("SourceItFresh.Areas.Market_Vendor.Models.dbo.CurrencyISO4217", "CurrencyISO4217")
                    .WithMany("OrderProducts")
                    .HasForeignKey("CurrencyISO4217Id")
                    .IsRequired()
                    .HasConstraintName("FK_OrderProducts_currencyISO4217Id");

                b.HasOne("SourceItFresh.Areas.Market_Vendor.Models.mar.Order", "Order")
                    .WithMany("OrderProducts")
                    .HasForeignKey("OrderId")
                    .IsRequired()
                    .HasConstraintName("FK_OrderProducts_orderId");

                b.Navigation("CurrencyISO4217");

                b.Navigation("Order");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Market_Vendor.Models.mar.Payment", b =>
            {
                b.HasOne("SourceItFresh.Areas.Market_Vendor.Models.dbo.CurrencyISO4217", "CurrencyISO4217")
                    .WithMany("Payments")
                    .HasForeignKey("CurrencyISO4217Id")
                    .IsRequired()
                    .HasConstraintName("FK_Order_currencyISO4217Id");

                b.HasOne("SourceItFresh.Areas.Market_Vendor.Models.mar.Order", "Order")
                    .WithMany("Payments")
                    .HasForeignKey("OrderId")
                    .IsRequired()
                    .HasConstraintName("FK_Order_orderId");

                b.HasOne("SourceItFresh.Areas.Market_Vendor.Models.dbo.PaymentType", "PaymentType")
                    .WithMany("Payments")
                    .HasForeignKey("PaymentTypeId")
                    .IsRequired()
                    .HasConstraintName("FK_Order_paymentTypeId");

                b.Navigation("CurrencyISO4217");

                b.Navigation("Order");

                b.Navigation("PaymentType");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Division", b =>
            {
                b.Navigation("Division_DivisionClasses");

                b.Navigation("SubKingdom_Divisions");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.DivisionClass", b =>
            {
                b.Navigation("DivisionClass_DivisionOrders");

                b.Navigation("Division_DivisionClasses");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.DivisionOrder", b =>
            {
                b.Navigation("DivisionClass_DivisionOrders");

                b.Navigation("DivisionOrder_Families");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Family", b =>
            {
                b.Navigation("DivisionOrder_Families");

                b.Navigation("Family_Genus");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Genus", b =>
            {
                b.Navigation("Family_Genus");

                b.Navigation("Genus_Plants");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Kingdom", b =>
            {
                b.Navigation("Kingdom_SubKingdoms");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Plant", b =>
            {
                b.Navigation("Genus_Plants");

                b.Navigation("Plant_Species");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.Species", b =>
            {
                b.Navigation("Plant_Species");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Base_Discover.Models.plt.SubKingdom", b =>
            {
                b.Navigation("Kingdom_SubKingdoms");

                b.Navigation("SubKingdom_Divisions");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Core_Help.Models.dbo.FeedbackCategory", b =>
            {
                b.Navigation("Feedbacks");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Core_Help.Models.dbo.FeedbackType", b =>
            {
                b.Navigation("Feedbacks");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Core_Help.Models.log.Feedback", b =>
            {
                b.Navigation("Responses");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Core_Help.Models.log.FeedbackMetadata", b =>
            {
                b.Navigation("Feedbacks");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Commodities.Models.cmd.Commodity", b =>
            {
                b.Navigation("AvailabilitySchedules");

                b.Navigation("Consumables");

                b.Navigation("DeliveryConfigs");

                b.Navigation("Packagings");

                b.Navigation("PaymentMethods");

                b.Navigation("Permits");

                b.Navigation("Products");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Commodities.Models.cmd.Consumable", b =>
            {
                b.Navigation("Products");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Commodities.Models.cmd.DeliveryConfig", b =>
            {
                b.Navigation("AvailabilitySchedules");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Commodities.Models.cmd.Packaging", b =>
            {
                b.Navigation("Products");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Commodities.Models.dbo.DeliveryMethod", b =>
            {
                b.Navigation("DeliveryConfigs");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.CropLifeCycleStage", b =>
            {
                b.Navigation("SubAreaStatusData");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.FarmAgriculture", b =>
            {
                b.Navigation("Farms");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.FarmCulture", b =>
            {
                b.Navigation("Farms");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.GrowMediumType", b =>
            {
                b.Navigation("GrowMediumDetails");

                b.Navigation("GrowSpaces");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.GrowSpaceDataEntryType", b =>
            {
                b.Navigation("GrowSpaceData");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.GrowSpaceLightSourceType", b =>
            {
                b.Navigation("GrowSpaces");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.GrowSpaceSetupType", b =>
            {
                b.Navigation("GrowSpaces");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.GrowSpaceType", b =>
            {
                b.Navigation("GrowSpaces");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.ZoneClassification", b =>
            {
                b.Navigation("Zones");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.dbo.ZoneClimateType", b =>
            {
                b.Navigation("Zones");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.frm.Farm", b =>
            {
                b.Navigation("Zones");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.frm.GrowSpace", b =>
            {
                b.Navigation("GrowSpaceData");

                b.Navigation("SubAreas");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.frm.SubArea", b =>
            {
                b.Navigation("SubAreaHarvestData");

                b.Navigation("SubAreaPlantfoodData");

                b.Navigation("SubAreaStatusData");

                b.Navigation("SubAreaWaterData");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Manage_Farm.Models.frm.Zone", b =>
            {
                b.Navigation("GrowSpaces");
            });

            modelBuilder.Entity("SourceItFresh.Areas.ManageOrg_Accounts.Models.sec.ApplicationSection", b =>
            {
                b.Navigation("PermissionDetails");
            });

            modelBuilder.Entity("SourceItFresh.Areas.ManageOrg_Accounts.Models.sec.SecurityGroup", b =>
            {
                b.Navigation("PermissionDetails");
            });

            modelBuilder.Entity("SourceItFresh.Areas.ManageOrg_TraderEntity.Models.dbo.MunicipalityDetail", b =>
            {
                b.Navigation("TraderLocations");
            });

            modelBuilder.Entity("SourceItFresh.Areas.ManageOrg_TraderEntity.Models.dbo.TraderType", b =>
            {
                b.Navigation("TraderEntities");
            });

            modelBuilder.Entity("SourceItFresh.Areas.ManageOrg_TraderEntity.Models.trd.TraderContactDetail", b =>
            {
                b.Navigation("TraderEntities");
            });

            modelBuilder.Entity("SourceItFresh.Areas.ManageOrg_TraderEntity.Models.trd.TraderLocation", b =>
            {
                b.Navigation("TraderEntities");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Market_Vendor.Models.dbo.CurrencyISO4217", b =>
            {
                b.Navigation("Credits");

                b.Navigation("OrderProducts");

                b.Navigation("Payments");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Market_Vendor.Models.dbo.OrderStatus", b =>
            {
                b.Navigation("Orders");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Market_Vendor.Models.dbo.PaymentType", b =>
            {
                b.Navigation("Payments");
            });

            modelBuilder.Entity("SourceItFresh.Areas.Market_Vendor.Models.mar.Order", b =>
            {
                b.Navigation("Logistics");

                b.Navigation("OrderProducts");

                b.Navigation("Payments");
            });
#pragma warning restore 612, 618
        }
    }
}
